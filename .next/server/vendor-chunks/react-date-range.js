"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-date-range";
exports.ids = ["vendor-chunks/react-date-range"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-date-range/dist/accessibility/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-date-range/dist/accessibility/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ariaLabelsShape = void 0;\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar ariaLabelsShape = _propTypes.default.shape({\n    dateInput: _propTypes.default.objectOf(_propTypes.default.shape({\n        startDate: _propTypes.default.string,\n        endDate: _propTypes.default.string\n    })),\n    monthPicker: _propTypes.default.string,\n    yearPicker: _propTypes.default.string,\n    prevButton: _propTypes.default.string,\n    nextButton: _propTypes.default.string\n});\nexports.ariaLabelsShape = ariaLabelsShape;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L2FjY2Vzc2liaWxpdHkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHVCQUF1QixHQUFHLEtBQUs7QUFFL0IsSUFBSUcsYUFBYUMsdUJBQXVCQyxtQkFBT0EsQ0FBQyw0REFBWTtBQUU1RCxTQUFTRCx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGLElBQUlKLGtCQUFrQkMsV0FBV0ssT0FBTyxDQUFDQyxLQUFLLENBQUM7SUFDN0NDLFdBQVdQLFdBQVdLLE9BQU8sQ0FBQ0csUUFBUSxDQUFDUixXQUFXSyxPQUFPLENBQUNDLEtBQUssQ0FBQztRQUM5REcsV0FBV1QsV0FBV0ssT0FBTyxDQUFDSyxNQUFNO1FBQ3BDQyxTQUFTWCxXQUFXSyxPQUFPLENBQUNLLE1BQU07SUFDcEM7SUFDQUUsYUFBYVosV0FBV0ssT0FBTyxDQUFDSyxNQUFNO0lBQ3RDRyxZQUFZYixXQUFXSyxPQUFPLENBQUNLLE1BQU07SUFDckNJLFlBQVlkLFdBQVdLLE9BQU8sQ0FBQ0ssTUFBTTtJQUNyQ0ssWUFBWWYsV0FBV0ssT0FBTyxDQUFDSyxNQUFNO0FBQ3ZDO0FBRUFiLHVCQUF1QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zhc3RrYXJ0LWxhdGVzdC1uZXh0LWFkbWluLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGUtcmFuZ2UvZGlzdC9hY2Nlc3NpYmlsaXR5L2luZGV4LmpzPzM3MDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFyaWFMYWJlbHNTaGFwZSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGFyaWFMYWJlbHNTaGFwZSA9IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGRhdGVJbnB1dDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdE9mKF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgc3RhcnREYXRlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICAgIGVuZERhdGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbiAgfSkpLFxuICBtb250aFBpY2tlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgeWVhclBpY2tlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgcHJldkJ1dHRvbjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgbmV4dEJ1dHRvbjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSk7XG5cbmV4cG9ydHMuYXJpYUxhYmVsc1NoYXBlID0gYXJpYUxhYmVsc1NoYXBlOyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFyaWFMYWJlbHNTaGFwZSIsIl9wcm9wVHlwZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwic2hhcGUiLCJkYXRlSW5wdXQiLCJvYmplY3RPZiIsInN0YXJ0RGF0ZSIsInN0cmluZyIsImVuZERhdGUiLCJtb250aFBpY2tlciIsInllYXJQaWNrZXIiLCJwcmV2QnV0dG9uIiwibmV4dEJ1dHRvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/accessibility/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/Calendar/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/Calendar/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _DayCell = __webpack_require__(/*! ../DayCell */ \"(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js\");\nvar _Month = _interopRequireDefault(__webpack_require__(/*! ../Month */ \"(ssr)/./node_modules/react-date-range/dist/components/Month/index.js\"));\nvar _DateInput = _interopRequireDefault(__webpack_require__(/*! ../DateInput */ \"(ssr)/./node_modules/react-date-range/dist/components/DateInput/index.js\"));\nvar _utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/react-date-range/dist/utils.js\");\nvar _classnames3 = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _reactList = _interopRequireDefault(__webpack_require__(/*! react-list */ \"(ssr)/./node_modules/react-list/react-list.js\"));\nvar _shallowEqual = __webpack_require__(/*! shallow-equal */ \"(ssr)/./node_modules/shallow-equal/dist/index.esm.js\");\nvar _max = _interopRequireDefault(__webpack_require__(/*! date-fns/max */ \"(ssr)/./node_modules/date-fns/esm/max/index.js\"));\nvar _min = _interopRequireDefault(__webpack_require__(/*! date-fns/min */ \"(ssr)/./node_modules/date-fns/esm/min/index.js\"));\nvar _differenceInDays = _interopRequireDefault(__webpack_require__(/*! date-fns/differenceInDays */ \"(ssr)/./node_modules/date-fns/esm/differenceInDays/index.js\"));\nvar _isSameMonth = _interopRequireDefault(__webpack_require__(/*! date-fns/isSameMonth */ \"(ssr)/./node_modules/date-fns/esm/isSameMonth/index.js\"));\nvar _addDays = _interopRequireDefault(__webpack_require__(/*! date-fns/addDays */ \"(ssr)/./node_modules/date-fns/esm/addDays/index.js\"));\nvar _endOfMonth = _interopRequireDefault(__webpack_require__(/*! date-fns/endOfMonth */ \"(ssr)/./node_modules/date-fns/esm/endOfMonth/index.js\"));\nvar _startOfMonth = _interopRequireDefault(__webpack_require__(/*! date-fns/startOfMonth */ \"(ssr)/./node_modules/date-fns/esm/startOfMonth/index.js\"));\nvar _differenceInCalendarMonths = _interopRequireDefault(__webpack_require__(/*! date-fns/differenceInCalendarMonths */ \"(ssr)/./node_modules/date-fns/esm/differenceInCalendarMonths/index.js\"));\nvar _setMonth2 = _interopRequireDefault(__webpack_require__(/*! date-fns/setMonth */ \"(ssr)/./node_modules/date-fns/esm/setMonth/index.js\"));\nvar _setYear2 = _interopRequireDefault(__webpack_require__(/*! date-fns/setYear */ \"(ssr)/./node_modules/date-fns/esm/setYear/index.js\"));\nvar _addYears = _interopRequireDefault(__webpack_require__(/*! date-fns/addYears */ \"(ssr)/./node_modules/date-fns/esm/addYears/index.js\"));\nvar _isSameDay = _interopRequireDefault(__webpack_require__(/*! date-fns/isSameDay */ \"(ssr)/./node_modules/date-fns/esm/isSameDay/index.js\"));\nvar _endOfWeek = _interopRequireDefault(__webpack_require__(/*! date-fns/endOfWeek */ \"(ssr)/./node_modules/date-fns/esm/endOfWeek/index.js\"));\nvar _startOfWeek = _interopRequireDefault(__webpack_require__(/*! date-fns/startOfWeek */ \"(ssr)/./node_modules/date-fns/esm/startOfWeek/index.js\"));\nvar _eachDayOfInterval = _interopRequireDefault(__webpack_require__(/*! date-fns/eachDayOfInterval */ \"(ssr)/./node_modules/date-fns/esm/eachDayOfInterval/index.js\"));\nvar _format = _interopRequireDefault(__webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/esm/format/index.js\"));\nvar _subMonths = _interopRequireDefault(__webpack_require__(/*! date-fns/subMonths */ \"(ssr)/./node_modules/date-fns/esm/subMonths/index.js\"));\nvar _addMonths = _interopRequireDefault(__webpack_require__(/*! date-fns/addMonths */ \"(ssr)/./node_modules/date-fns/esm/addMonths/index.js\"));\nvar _enUS = _interopRequireDefault(__webpack_require__(/*! date-fns/locale/en-US */ \"(ssr)/./node_modules/date-fns/esm/locale/en-US/index.js\"));\nvar _styles = _interopRequireDefault(__webpack_require__(/*! ../../styles */ \"(ssr)/./node_modules/react-date-range/dist/styles.js\"));\nvar _accessibility = __webpack_require__(/*! ../../accessibility */ \"(ssr)/./node_modules/react-date-range/dist/accessibility/index.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar Calendar = /*#__PURE__*/ function(_PureComponent) {\n    _inherits(Calendar, _PureComponent);\n    var _super = _createSuper(Calendar);\n    function Calendar(_props, context) {\n        var _this;\n        _classCallCheck(this, Calendar);\n        _this = _super.call(this, _props, context);\n        _defineProperty(_assertThisInitialized(_this), \"focusToDate\", function(date) {\n            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props;\n            var preventUnnecessary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n            if (!props.scroll.enabled) {\n                if (preventUnnecessary && props.preventSnapRefocus) {\n                    var focusedDateDiff = (0, _differenceInCalendarMonths.default)(date, _this.state.focusedDate);\n                    var isAllowedForward = props.calendarFocus === \"forwards\" && focusedDateDiff >= 0;\n                    var isAllowedBackward = props.calendarFocus === \"backwards\" && focusedDateDiff <= 0;\n                    if ((isAllowedForward || isAllowedBackward) && Math.abs(focusedDateDiff) < props.months) {\n                        return;\n                    }\n                }\n                _this.setState({\n                    focusedDate: date\n                });\n                return;\n            }\n            var targetMonthIndex = (0, _differenceInCalendarMonths.default)(date, props.minDate, _this.dateOptions);\n            var visibleMonths = _this.list.getVisibleRange();\n            if (preventUnnecessary && visibleMonths.includes(targetMonthIndex)) return;\n            _this.isFirstRender = true;\n            _this.list.scrollTo(targetMonthIndex);\n            _this.setState({\n                focusedDate: date\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"updateShownDate\", function() {\n            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;\n            var newProps = props.scroll.enabled ? _objectSpread(_objectSpread({}, props), {}, {\n                months: _this.list.getVisibleRange().length\n            }) : props;\n            var newFocus = (0, _utils.calcFocusDate)(_this.state.focusedDate, newProps);\n            _this.focusToDate(newFocus, newProps);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"updatePreview\", function(val) {\n            if (!val) {\n                _this.setState({\n                    preview: null\n                });\n                return;\n            }\n            var preview = {\n                startDate: val,\n                endDate: val,\n                color: _this.props.color\n            };\n            _this.setState({\n                preview: preview\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"changeShownDate\", function(value) {\n            var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"set\";\n            var focusedDate = _this.state.focusedDate;\n            var _this$props = _this.props, onShownDateChange = _this$props.onShownDateChange, minDate = _this$props.minDate, maxDate = _this$props.maxDate;\n            var modeMapper = {\n                monthOffset: function monthOffset() {\n                    return (0, _addMonths.default)(focusedDate, value);\n                },\n                setMonth: function(_setMonth) {\n                    function setMonth() {\n                        return _setMonth.apply(this, arguments);\n                    }\n                    setMonth.toString = function() {\n                        return _setMonth.toString();\n                    };\n                    return setMonth;\n                }(function() {\n                    return (0, _setMonth2.default)(focusedDate, value);\n                }),\n                setYear: function(_setYear) {\n                    function setYear() {\n                        return _setYear.apply(this, arguments);\n                    }\n                    setYear.toString = function() {\n                        return _setYear.toString();\n                    };\n                    return setYear;\n                }(function() {\n                    return (0, _setYear2.default)(focusedDate, value);\n                }),\n                set: function set() {\n                    return value;\n                }\n            };\n            var newDate = (0, _min.default)([\n                (0, _max.default)([\n                    modeMapper[mode](),\n                    minDate\n                ]),\n                maxDate\n            ]);\n            _this.focusToDate(newDate, _this.props, false);\n            onShownDateChange && onShownDateChange(newDate);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleRangeFocusChange\", function(rangesIndex, rangeItemIndex) {\n            _this.props.onRangeFocusChange && _this.props.onRangeFocusChange([\n                rangesIndex,\n                rangeItemIndex\n            ]);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleScroll\", function() {\n            var _this$props2 = _this.props, onShownDateChange = _this$props2.onShownDateChange, minDate = _this$props2.minDate;\n            var focusedDate = _this.state.focusedDate;\n            var _assertThisInitialize = _assertThisInitialized(_this), isFirstRender = _assertThisInitialize.isFirstRender;\n            var visibleMonths = _this.list.getVisibleRange(); // prevent scroll jump with wrong visible value\n            if (visibleMonths[0] === undefined) return;\n            var visibleMonth = (0, _addMonths.default)(minDate, visibleMonths[0] || 0);\n            var isFocusedToDifferent = !(0, _isSameMonth.default)(visibleMonth, focusedDate);\n            if (isFocusedToDifferent && !isFirstRender) {\n                _this.setState({\n                    focusedDate: visibleMonth\n                });\n                onShownDateChange && onShownDateChange(visibleMonth);\n            }\n            _this.isFirstRender = false;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"renderMonthAndYear\", function(focusedDate, changeShownDate, props) {\n            var showMonthArrow = props.showMonthArrow, minDate = props.minDate, maxDate = props.maxDate, showMonthAndYearPickers = props.showMonthAndYearPickers, ariaLabels = props.ariaLabels;\n            var upperYearLimit = (maxDate || Calendar.defaultProps.maxDate).getFullYear();\n            var lowerYearLimit = (minDate || Calendar.defaultProps.minDate).getFullYear();\n            var styles = _this.styles;\n            return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                onMouseUp: function onMouseUp(e) {\n                    return e.stopPropagation();\n                },\n                className: styles.monthAndYearWrapper\n            }, showMonthArrow ? /*#__PURE__*/ _react.default.createElement(\"button\", {\n                type: \"button\",\n                className: (0, _classnames3.default)(styles.nextPrevButton, styles.prevButton),\n                onClick: function onClick() {\n                    return changeShownDate(-1, \"monthOffset\");\n                },\n                \"aria-label\": ariaLabels.prevButton\n            }, /*#__PURE__*/ _react.default.createElement(\"i\", null)) : null, showMonthAndYearPickers ? /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: styles.monthAndYearPickers\n            }, /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: styles.monthPicker\n            }, /*#__PURE__*/ _react.default.createElement(\"select\", {\n                value: focusedDate.getMonth(),\n                onChange: function onChange(e) {\n                    return changeShownDate(e.target.value, \"setMonth\");\n                },\n                \"aria-label\": ariaLabels.monthPicker\n            }, _this.state.monthNames.map(function(monthName, i) {\n                return /*#__PURE__*/ _react.default.createElement(\"option\", {\n                    key: i,\n                    value: i\n                }, monthName);\n            }))), /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: styles.monthAndYearDivider\n            }), /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: styles.yearPicker\n            }, /*#__PURE__*/ _react.default.createElement(\"select\", {\n                value: focusedDate.getFullYear(),\n                onChange: function onChange(e) {\n                    return changeShownDate(e.target.value, \"setYear\");\n                },\n                \"aria-label\": ariaLabels.yearPicker\n            }, new Array(upperYearLimit - lowerYearLimit + 1).fill(upperYearLimit).map(function(val, i) {\n                var year = val - i;\n                return /*#__PURE__*/ _react.default.createElement(\"option\", {\n                    key: year,\n                    value: year\n                }, year);\n            })))) : /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: styles.monthAndYearPickers\n            }, _this.state.monthNames[focusedDate.getMonth()], \" \", focusedDate.getFullYear()), showMonthArrow ? /*#__PURE__*/ _react.default.createElement(\"button\", {\n                type: \"button\",\n                className: (0, _classnames3.default)(styles.nextPrevButton, styles.nextButton),\n                onClick: function onClick() {\n                    return changeShownDate(+1, \"monthOffset\");\n                },\n                \"aria-label\": ariaLabels.nextButton\n            }, /*#__PURE__*/ _react.default.createElement(\"i\", null)) : null);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"renderDateDisplay\", function() {\n            var _this$props3 = _this.props, focusedRange = _this$props3.focusedRange, color = _this$props3.color, ranges = _this$props3.ranges, rangeColors = _this$props3.rangeColors, dateDisplayFormat = _this$props3.dateDisplayFormat, editableDateInputs = _this$props3.editableDateInputs, startDatePlaceholder = _this$props3.startDatePlaceholder, endDatePlaceholder = _this$props3.endDatePlaceholder, ariaLabels = _this$props3.ariaLabels;\n            var defaultColor = rangeColors[focusedRange[0]] || color;\n            var styles = _this.styles;\n            return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                className: styles.dateDisplayWrapper\n            }, ranges.map(function(range, i) {\n                if (range.showDateDisplay === false || range.disabled && !range.showDateDisplay) return null;\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: styles.dateDisplay,\n                    key: i,\n                    style: {\n                        color: range.color || defaultColor\n                    }\n                }, /*#__PURE__*/ _react.default.createElement(_DateInput.default, {\n                    className: (0, _classnames3.default)(styles.dateDisplayItem, _defineProperty({}, styles.dateDisplayItemActive, focusedRange[0] === i && focusedRange[1] === 0)),\n                    readOnly: !editableDateInputs,\n                    disabled: range.disabled,\n                    value: range.startDate,\n                    placeholder: startDatePlaceholder,\n                    dateOptions: _this.dateOptions,\n                    dateDisplayFormat: dateDisplayFormat,\n                    ariaLabel: ariaLabels.dateInput && ariaLabels.dateInput[range.key] && ariaLabels.dateInput[range.key].startDate,\n                    onChange: _this.onDragSelectionEnd,\n                    onFocus: function onFocus() {\n                        return _this.handleRangeFocusChange(i, 0);\n                    }\n                }), /*#__PURE__*/ _react.default.createElement(_DateInput.default, {\n                    className: (0, _classnames3.default)(styles.dateDisplayItem, _defineProperty({}, styles.dateDisplayItemActive, focusedRange[0] === i && focusedRange[1] === 1)),\n                    readOnly: !editableDateInputs,\n                    disabled: range.disabled,\n                    value: range.endDate,\n                    placeholder: endDatePlaceholder,\n                    dateOptions: _this.dateOptions,\n                    dateDisplayFormat: dateDisplayFormat,\n                    ariaLabel: ariaLabels.dateInput && ariaLabels.dateInput[range.key] && ariaLabels.dateInput[range.key].endDate,\n                    onChange: _this.onDragSelectionEnd,\n                    onFocus: function onFocus() {\n                        return _this.handleRangeFocusChange(i, 1);\n                    }\n                }));\n            }));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDragSelectionStart\", function(date) {\n            var _this$props4 = _this.props, onChange = _this$props4.onChange, dragSelectionEnabled = _this$props4.dragSelectionEnabled;\n            if (dragSelectionEnabled) {\n                _this.setState({\n                    drag: {\n                        status: true,\n                        range: {\n                            startDate: date,\n                            endDate: date\n                        },\n                        disablePreview: true\n                    }\n                });\n            } else {\n                onChange && onChange(date);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDragSelectionEnd\", function(date) {\n            var _this$props5 = _this.props, updateRange = _this$props5.updateRange, displayMode = _this$props5.displayMode, onChange = _this$props5.onChange, dragSelectionEnabled = _this$props5.dragSelectionEnabled;\n            if (!dragSelectionEnabled) return;\n            if (displayMode === \"date\" || !_this.state.drag.status) {\n                onChange && onChange(date);\n                return;\n            }\n            var newRange = {\n                startDate: _this.state.drag.range.startDate,\n                endDate: date\n            };\n            if (displayMode !== \"dateRange\" || (0, _isSameDay.default)(newRange.startDate, date)) {\n                _this.setState({\n                    drag: {\n                        status: false,\n                        range: {}\n                    }\n                }, function() {\n                    return onChange && onChange(date);\n                });\n            } else {\n                _this.setState({\n                    drag: {\n                        status: false,\n                        range: {}\n                    }\n                }, function() {\n                    updateRange && updateRange(newRange);\n                });\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDragSelectionMove\", function(date) {\n            var drag = _this.state.drag;\n            if (!drag.status || !_this.props.dragSelectionEnabled) return;\n            _this.setState({\n                drag: {\n                    status: drag.status,\n                    range: {\n                        startDate: drag.range.startDate,\n                        endDate: date\n                    },\n                    disablePreview: true\n                }\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"estimateMonthSize\", function(index, cache) {\n            var _this$props6 = _this.props, direction = _this$props6.direction, minDate = _this$props6.minDate;\n            var scrollArea = _this.state.scrollArea;\n            if (cache) {\n                _this.listSizeCache = cache;\n                if (cache[index]) return cache[index];\n            }\n            if (direction === \"horizontal\") return scrollArea.monthWidth;\n            var monthStep = (0, _addMonths.default)(minDate, index);\n            var _getMonthDisplayRange = (0, _utils.getMonthDisplayRange)(monthStep, _this.dateOptions), start = _getMonthDisplayRange.start, end = _getMonthDisplayRange.end;\n            var isLongMonth = (0, _differenceInDays.default)(end, start, _this.dateOptions) + 1 > 7 * 5;\n            return isLongMonth ? scrollArea.longMonthHeight : scrollArea.monthHeight;\n        });\n        _this.dateOptions = {\n            locale: _props.locale\n        };\n        if (_props.weekStartsOn !== undefined) _this.dateOptions.weekStartsOn = _props.weekStartsOn;\n        _this.styles = (0, _utils.generateStyles)([\n            _styles.default,\n            _props.classNames\n        ]);\n        _this.listSizeCache = {};\n        _this.isFirstRender = true;\n        _this.state = {\n            monthNames: _this.getMonthNames(),\n            focusedDate: (0, _utils.calcFocusDate)(null, _props),\n            drag: {\n                status: false,\n                range: {\n                    startDate: null,\n                    endDate: null\n                },\n                disablePreview: false\n            },\n            scrollArea: _this.calcScrollArea(_props)\n        };\n        return _this;\n    }\n    _createClass(Calendar, [\n        {\n            key: \"getMonthNames\",\n            value: function getMonthNames() {\n                var _this2 = this;\n                return _toConsumableArray(Array(12).keys()).map(function(i) {\n                    return _this2.props.locale.localize.month(i);\n                });\n            }\n        },\n        {\n            key: \"calcScrollArea\",\n            value: function calcScrollArea(props) {\n                var direction = props.direction, months = props.months, scroll = props.scroll;\n                if (!scroll.enabled) return {\n                    enabled: false\n                };\n                var longMonthHeight = scroll.longMonthHeight || scroll.monthHeight;\n                if (direction === \"vertical\") {\n                    return {\n                        enabled: true,\n                        monthHeight: scroll.monthHeight || 220,\n                        longMonthHeight: longMonthHeight || 260,\n                        calendarWidth: \"auto\",\n                        calendarHeight: (scroll.calendarHeight || longMonthHeight || 240) * months\n                    };\n                }\n                return {\n                    enabled: true,\n                    monthWidth: scroll.monthWidth || 332,\n                    calendarWidth: (scroll.calendarWidth || scroll.monthWidth || 332) * months,\n                    monthHeight: longMonthHeight || 300,\n                    calendarHeight: longMonthHeight || 300\n                };\n            }\n        },\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                var _this3 = this;\n                if (this.props.scroll.enabled) {\n                    // prevent react-list's initial render focus problem\n                    setTimeout(function() {\n                        return _this3.focusToDate(_this3.state.focusedDate);\n                    });\n                }\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var propMapper = {\n                    dateRange: \"ranges\",\n                    date: \"date\"\n                };\n                var targetProp = propMapper[this.props.displayMode];\n                if (this.props[targetProp] !== prevProps[targetProp]) {\n                    this.updateShownDate(this.props);\n                }\n                if (prevProps.locale !== this.props.locale || prevProps.weekStartsOn !== this.props.weekStartsOn) {\n                    this.dateOptions = {\n                        locale: this.props.locale\n                    };\n                    if (this.props.weekStartsOn !== undefined) this.dateOptions.weekStartsOn = this.props.weekStartsOn;\n                    this.setState({\n                        monthNames: this.getMonthNames()\n                    });\n                }\n                if (!(0, _shallowEqual.shallowEqualObjects)(prevProps.scroll, this.props.scroll)) {\n                    this.setState({\n                        scrollArea: this.calcScrollArea(this.props)\n                    });\n                }\n            }\n        },\n        {\n            key: \"renderWeekdays\",\n            value: function renderWeekdays() {\n                var _this4 = this;\n                var now = new Date();\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: this.styles.weekDays\n                }, (0, _eachDayOfInterval.default)({\n                    start: (0, _startOfWeek.default)(now, this.dateOptions),\n                    end: (0, _endOfWeek.default)(now, this.dateOptions)\n                }).map(function(day, i) {\n                    return /*#__PURE__*/ _react.default.createElement(\"span\", {\n                        className: _this4.styles.weekDay,\n                        key: i\n                    }, (0, _format.default)(day, _this4.props.weekdayDisplayFormat, _this4.dateOptions));\n                }));\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this5 = this;\n                var _this$props7 = this.props, showDateDisplay = _this$props7.showDateDisplay, onPreviewChange = _this$props7.onPreviewChange, scroll = _this$props7.scroll, direction = _this$props7.direction, disabledDates = _this$props7.disabledDates, disabledDay = _this$props7.disabledDay, maxDate = _this$props7.maxDate, minDate = _this$props7.minDate, rangeColors = _this$props7.rangeColors, color = _this$props7.color, navigatorRenderer = _this$props7.navigatorRenderer, className = _this$props7.className, preview = _this$props7.preview;\n                var _this$state = this.state, scrollArea = _this$state.scrollArea, focusedDate = _this$state.focusedDate;\n                var isVertical = direction === \"vertical\";\n                var monthAndYearRenderer = navigatorRenderer || this.renderMonthAndYear;\n                var ranges = this.props.ranges.map(function(range, i) {\n                    return _objectSpread(_objectSpread({}, range), {}, {\n                        color: range.color || rangeColors[i] || color\n                    });\n                });\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: (0, _classnames3.default)(this.styles.calendarWrapper, className),\n                    onMouseUp: function onMouseUp() {\n                        return _this5.setState({\n                            drag: {\n                                status: false,\n                                range: {}\n                            }\n                        });\n                    },\n                    onMouseLeave: function onMouseLeave() {\n                        _this5.setState({\n                            drag: {\n                                status: false,\n                                range: {}\n                            }\n                        });\n                    }\n                }, showDateDisplay && this.renderDateDisplay(), monthAndYearRenderer(focusedDate, this.changeShownDate, this.props), scroll.enabled ? /*#__PURE__*/ _react.default.createElement(\"div\", null, isVertical && this.renderWeekdays(this.dateOptions), /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: (0, _classnames3.default)(this.styles.infiniteMonths, isVertical ? this.styles.monthsVertical : this.styles.monthsHorizontal),\n                    onMouseLeave: function onMouseLeave() {\n                        return onPreviewChange && onPreviewChange();\n                    },\n                    style: {\n                        width: scrollArea.calendarWidth + 11,\n                        height: scrollArea.calendarHeight + 11\n                    },\n                    onScroll: this.handleScroll\n                }, /*#__PURE__*/ _react.default.createElement(_reactList.default, {\n                    length: (0, _differenceInCalendarMonths.default)((0, _endOfMonth.default)(maxDate), (0, _addDays.default)((0, _startOfMonth.default)(minDate), -1), this.dateOptions),\n                    treshold: 500,\n                    type: \"variable\",\n                    ref: function ref(target) {\n                        return _this5.list = target;\n                    },\n                    itemSizeEstimator: this.estimateMonthSize,\n                    axis: isVertical ? \"y\" : \"x\",\n                    itemRenderer: function itemRenderer(index, key) {\n                        var monthStep = (0, _addMonths.default)(minDate, index);\n                        return /*#__PURE__*/ _react.default.createElement(_Month.default, _extends({}, _this5.props, {\n                            onPreviewChange: onPreviewChange || _this5.updatePreview,\n                            preview: preview || _this5.state.preview,\n                            ranges: ranges,\n                            key: key,\n                            drag: _this5.state.drag,\n                            dateOptions: _this5.dateOptions,\n                            disabledDates: disabledDates,\n                            disabledDay: disabledDay,\n                            month: monthStep,\n                            onDragSelectionStart: _this5.onDragSelectionStart,\n                            onDragSelectionEnd: _this5.onDragSelectionEnd,\n                            onDragSelectionMove: _this5.onDragSelectionMove,\n                            onMouseLeave: function onMouseLeave() {\n                                return onPreviewChange && onPreviewChange();\n                            },\n                            styles: _this5.styles,\n                            style: isVertical ? {\n                                height: _this5.estimateMonthSize(index)\n                            } : {\n                                height: scrollArea.monthHeight,\n                                width: _this5.estimateMonthSize(index)\n                            },\n                            showMonthName: true,\n                            showWeekDays: !isVertical\n                        }));\n                    }\n                }))) : /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: (0, _classnames3.default)(this.styles.months, isVertical ? this.styles.monthsVertical : this.styles.monthsHorizontal)\n                }, new Array(this.props.months).fill(null).map(function(_, i) {\n                    var monthStep = (0, _addMonths.default)(_this5.state.focusedDate, i);\n                    ;\n                    if (_this5.props.calendarFocus === \"backwards\") {\n                        monthStep = (0, _subMonths.default)(_this5.state.focusedDate, _this5.props.months - 1 - i);\n                    }\n                    return /*#__PURE__*/ _react.default.createElement(_Month.default, _extends({}, _this5.props, {\n                        onPreviewChange: onPreviewChange || _this5.updatePreview,\n                        preview: preview || _this5.state.preview,\n                        ranges: ranges,\n                        key: i,\n                        drag: _this5.state.drag,\n                        dateOptions: _this5.dateOptions,\n                        disabledDates: disabledDates,\n                        disabledDay: disabledDay,\n                        month: monthStep,\n                        onDragSelectionStart: _this5.onDragSelectionStart,\n                        onDragSelectionEnd: _this5.onDragSelectionEnd,\n                        onDragSelectionMove: _this5.onDragSelectionMove,\n                        onMouseLeave: function onMouseLeave() {\n                            return onPreviewChange && onPreviewChange();\n                        },\n                        styles: _this5.styles,\n                        showWeekDays: !isVertical || i === 0,\n                        showMonthName: !isVertical || i > 0\n                    }));\n                })));\n            }\n        }\n    ]);\n    return Calendar;\n}(_react.PureComponent);\nCalendar.defaultProps = {\n    showMonthArrow: true,\n    showMonthAndYearPickers: true,\n    disabledDates: [],\n    disabledDay: function disabledDay() {},\n    classNames: {},\n    locale: _enUS.default,\n    ranges: [],\n    focusedRange: [\n        0,\n        0\n    ],\n    dateDisplayFormat: \"MMM d, yyyy\",\n    monthDisplayFormat: \"MMM yyyy\",\n    weekdayDisplayFormat: \"E\",\n    dayDisplayFormat: \"d\",\n    showDateDisplay: true,\n    showPreview: true,\n    displayMode: \"date\",\n    months: 1,\n    color: \"#3d91ff\",\n    scroll: {\n        enabled: false\n    },\n    direction: \"vertical\",\n    maxDate: (0, _addYears.default)(new Date(), 20),\n    minDate: (0, _addYears.default)(new Date(), -100),\n    rangeColors: [\n        \"#3d91ff\",\n        \"#3ecf8e\",\n        \"#fed14c\"\n    ],\n    startDatePlaceholder: \"Early\",\n    endDatePlaceholder: \"Continuous\",\n    editableDateInputs: false,\n    dragSelectionEnabled: true,\n    fixedHeight: false,\n    calendarFocus: \"forwards\",\n    preventSnapRefocus: false,\n    ariaLabels: {}\n};\nCalendar.propTypes = {\n    showMonthArrow: _propTypes.default.bool,\n    showMonthAndYearPickers: _propTypes.default.bool,\n    disabledDates: _propTypes.default.array,\n    disabledDay: _propTypes.default.func,\n    minDate: _propTypes.default.object,\n    maxDate: _propTypes.default.object,\n    date: _propTypes.default.object,\n    onChange: _propTypes.default.func,\n    onPreviewChange: _propTypes.default.func,\n    onRangeFocusChange: _propTypes.default.func,\n    classNames: _propTypes.default.object,\n    locale: _propTypes.default.object,\n    shownDate: _propTypes.default.object,\n    onShownDateChange: _propTypes.default.func,\n    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),\n    preview: _propTypes.default.shape({\n        startDate: _propTypes.default.object,\n        endDate: _propTypes.default.object,\n        color: _propTypes.default.string\n    }),\n    dateDisplayFormat: _propTypes.default.string,\n    monthDisplayFormat: _propTypes.default.string,\n    weekdayDisplayFormat: _propTypes.default.string,\n    weekStartsOn: _propTypes.default.number,\n    dayDisplayFormat: _propTypes.default.string,\n    focusedRange: _propTypes.default.arrayOf(_propTypes.default.number),\n    initialFocusedRange: _propTypes.default.arrayOf(_propTypes.default.number),\n    months: _propTypes.default.number,\n    className: _propTypes.default.string,\n    showDateDisplay: _propTypes.default.bool,\n    showPreview: _propTypes.default.bool,\n    displayMode: _propTypes.default.oneOf([\n        \"dateRange\",\n        \"date\"\n    ]),\n    color: _propTypes.default.string,\n    updateRange: _propTypes.default.func,\n    scroll: _propTypes.default.shape({\n        enabled: _propTypes.default.bool,\n        monthHeight: _propTypes.default.number,\n        longMonthHeight: _propTypes.default.number,\n        monthWidth: _propTypes.default.number,\n        calendarWidth: _propTypes.default.number,\n        calendarHeight: _propTypes.default.number\n    }),\n    direction: _propTypes.default.oneOf([\n        \"vertical\",\n        \"horizontal\"\n    ]),\n    startDatePlaceholder: _propTypes.default.string,\n    endDatePlaceholder: _propTypes.default.string,\n    navigatorRenderer: _propTypes.default.func,\n    rangeColors: _propTypes.default.arrayOf(_propTypes.default.string),\n    editableDateInputs: _propTypes.default.bool,\n    dragSelectionEnabled: _propTypes.default.bool,\n    fixedHeight: _propTypes.default.bool,\n    calendarFocus: _propTypes.default.string,\n    preventSnapRefocus: _propTypes.default.bool,\n    ariaLabels: _accessibility.ariaLabelsShape\n};\nvar _default = Calendar;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/Calendar/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/DateInput/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/DateInput/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _isEqual = _interopRequireDefault(__webpack_require__(/*! date-fns/isEqual */ \"(ssr)/./node_modules/date-fns/esm/isEqual/index.js\"));\nvar _isValid = _interopRequireDefault(__webpack_require__(/*! date-fns/isValid */ \"(ssr)/./node_modules/date-fns/esm/isValid/index.js\"));\nvar _parse = _interopRequireDefault(__webpack_require__(/*! date-fns/parse */ \"(ssr)/./node_modules/date-fns/esm/parse/index.js\"));\nvar _format = _interopRequireDefault(__webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/esm/format/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar DateInput = /*#__PURE__*/ function(_PureComponent) {\n    _inherits(DateInput, _PureComponent);\n    var _super = _createSuper(DateInput);\n    function DateInput(props, context) {\n        var _this;\n        _classCallCheck(this, DateInput);\n        _this = _super.call(this, props, context);\n        _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function(e) {\n            var value = _this.state.value;\n            if (e.key === \"Enter\") {\n                _this.update(value);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onChange\", function(e) {\n            _this.setState({\n                value: e.target.value,\n                changed: true,\n                invalid: false\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onBlur\", function() {\n            var value = _this.state.value;\n            _this.update(value);\n        });\n        _this.state = {\n            invalid: false,\n            changed: false,\n            value: _this.formatDate(props)\n        };\n        return _this;\n    }\n    _createClass(DateInput, [\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var value = prevProps.value;\n                if (!(0, _isEqual.default)(value, this.props.value)) {\n                    this.setState({\n                        value: this.formatDate(this.props)\n                    });\n                }\n            }\n        },\n        {\n            key: \"formatDate\",\n            value: function formatDate(_ref) {\n                var value = _ref.value, dateDisplayFormat = _ref.dateDisplayFormat, dateOptions = _ref.dateOptions;\n                if (value && (0, _isValid.default)(value)) {\n                    return (0, _format.default)(value, dateDisplayFormat, dateOptions);\n                }\n                return \"\";\n            }\n        },\n        {\n            key: \"update\",\n            value: function update(value) {\n                var _this$state = this.state, invalid = _this$state.invalid, changed = _this$state.changed;\n                if (invalid || !changed || !value) {\n                    return;\n                }\n                var _this$props = this.props, onChange = _this$props.onChange, dateDisplayFormat = _this$props.dateDisplayFormat, dateOptions = _this$props.dateOptions;\n                var parsed = (0, _parse.default)(value, dateDisplayFormat, new Date(), dateOptions);\n                if ((0, _isValid.default)(parsed)) {\n                    this.setState({\n                        changed: false\n                    }, function() {\n                        return onChange(parsed);\n                    });\n                } else {\n                    this.setState({\n                        invalid: true\n                    });\n                }\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props2 = this.props, className = _this$props2.className, readOnly = _this$props2.readOnly, placeholder = _this$props2.placeholder, ariaLabel = _this$props2.ariaLabel, disabled = _this$props2.disabled, onFocus = _this$props2.onFocus;\n                var _this$state2 = this.state, value = _this$state2.value, invalid = _this$state2.invalid;\n                return /*#__PURE__*/ _react.default.createElement(\"span\", {\n                    className: (0, _classnames.default)(\"rdrDateInput\", className)\n                }, /*#__PURE__*/ _react.default.createElement(\"input\", {\n                    readOnly: readOnly,\n                    disabled: disabled,\n                    value: value,\n                    placeholder: placeholder,\n                    \"aria-label\": ariaLabel,\n                    onKeyDown: this.onKeyDown,\n                    onChange: this.onChange,\n                    onBlur: this.onBlur,\n                    onFocus: onFocus\n                }), invalid && /*#__PURE__*/ _react.default.createElement(\"span\", {\n                    className: \"rdrWarning\"\n                }, \"⚠\"));\n            }\n        }\n    ]);\n    return DateInput;\n}(_react.PureComponent);\nDateInput.propTypes = {\n    value: _propTypes.default.object,\n    placeholder: _propTypes.default.string,\n    disabled: _propTypes.default.bool,\n    readOnly: _propTypes.default.bool,\n    dateOptions: _propTypes.default.object,\n    dateDisplayFormat: _propTypes.default.string,\n    ariaLabel: _propTypes.default.string,\n    className: _propTypes.default.string,\n    onFocus: _propTypes.default.func.isRequired,\n    onChange: _propTypes.default.func.isRequired\n};\nDateInput.defaultProps = {\n    readOnly: true,\n    disabled: false,\n    dateDisplayFormat: \"MMM D, YYYY\"\n};\nvar _default = DateInput;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/DateInput/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/DateRangePicker/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/DateRangePicker/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _DateRange = _interopRequireDefault(__webpack_require__(/*! ../DateRange */ \"(ssr)/./node_modules/react-date-range/dist/components/DateRange/index.js\"));\nvar _DefinedRange = _interopRequireDefault(__webpack_require__(/*! ../DefinedRange */ \"(ssr)/./node_modules/react-date-range/dist/components/DefinedRange/index.js\"));\nvar _utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/react-date-range/dist/utils.js\");\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _styles = _interopRequireDefault(__webpack_require__(/*! ../../styles */ \"(ssr)/./node_modules/react-date-range/dist/styles.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nvar DateRangePicker = /*#__PURE__*/ function(_Component) {\n    _inherits(DateRangePicker, _Component);\n    var _super = _createSuper(DateRangePicker);\n    function DateRangePicker(props) {\n        var _this;\n        _classCallCheck(this, DateRangePicker);\n        _this = _super.call(this, props);\n        _this.state = {\n            focusedRange: [\n                (0, _utils.findNextRangeIndex)(props.ranges),\n                0\n            ]\n        };\n        _this.styles = (0, _utils.generateStyles)([\n            _styles.default,\n            props.classNames\n        ]);\n        return _this;\n    }\n    _createClass(DateRangePicker, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this2 = this;\n                var focusedRange = this.state.focusedRange;\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: (0, _classnames.default)(this.styles.dateRangePickerWrapper, this.props.className)\n                }, /*#__PURE__*/ _react.default.createElement(_DefinedRange.default, _extends({\n                    focusedRange: focusedRange,\n                    onPreviewChange: function onPreviewChange(value) {\n                        return _this2.dateRange.updatePreview(value ? _this2.dateRange.calcNewSelection(value, typeof value === \"string\") : null);\n                    }\n                }, this.props, {\n                    range: this.props.ranges[focusedRange[0]],\n                    className: undefined\n                })), /*#__PURE__*/ _react.default.createElement(_DateRange.default, _extends({\n                    onRangeFocusChange: function onRangeFocusChange(focusedRange) {\n                        return _this2.setState({\n                            focusedRange: focusedRange\n                        });\n                    },\n                    focusedRange: focusedRange\n                }, this.props, {\n                    ref: function ref(t) {\n                        return _this2.dateRange = t;\n                    },\n                    className: undefined\n                })));\n            }\n        }\n    ]);\n    return DateRangePicker;\n}(_react.Component);\nDateRangePicker.defaultProps = {};\nDateRangePicker.propTypes = _objectSpread(_objectSpread(_objectSpread({}, _DateRange.default.propTypes), _DefinedRange.default.propTypes), {}, {\n    className: _propTypes.default.string\n});\nvar _default = DateRangePicker;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/DateRangePicker/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/DateRange/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/DateRange/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _Calendar = _interopRequireDefault(__webpack_require__(/*! ../Calendar */ \"(ssr)/./node_modules/react-date-range/dist/components/Calendar/index.js\"));\nvar _DayCell = __webpack_require__(/*! ../DayCell */ \"(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js\");\nvar _utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/react-date-range/dist/utils.js\");\nvar _max = _interopRequireDefault(__webpack_require__(/*! date-fns/max */ \"(ssr)/./node_modules/date-fns/esm/max/index.js\"));\nvar _isWithinInterval = _interopRequireDefault(__webpack_require__(/*! date-fns/isWithinInterval */ \"(ssr)/./node_modules/date-fns/esm/isWithinInterval/index.js\"));\nvar _min = _interopRequireDefault(__webpack_require__(/*! date-fns/min */ \"(ssr)/./node_modules/date-fns/esm/min/index.js\"));\nvar _addDays = _interopRequireDefault(__webpack_require__(/*! date-fns/addDays */ \"(ssr)/./node_modules/date-fns/esm/addDays/index.js\"));\nvar _differenceInCalendarDays = _interopRequireDefault(__webpack_require__(/*! date-fns/differenceInCalendarDays */ \"(ssr)/./node_modules/date-fns/esm/differenceInCalendarDays/index.js\"));\nvar _isBefore = _interopRequireDefault(__webpack_require__(/*! date-fns/isBefore */ \"(ssr)/./node_modules/date-fns/esm/isBefore/index.js\"));\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _styles = _interopRequireDefault(__webpack_require__(/*! ../../styles */ \"(ssr)/./node_modules/react-date-range/dist/styles.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar DateRange = /*#__PURE__*/ function(_Component) {\n    _inherits(DateRange, _Component);\n    var _super = _createSuper(DateRange);\n    function DateRange(props, context) {\n        var _this;\n        _classCallCheck(this, DateRange);\n        _this = _super.call(this, props, context);\n        _defineProperty(_assertThisInitialized(_this), \"calcNewSelection\", function(value) {\n            var isSingleValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n            var focusedRange = _this.props.focusedRange || _this.state.focusedRange;\n            var _this$props = _this.props, ranges = _this$props.ranges, onChange = _this$props.onChange, maxDate = _this$props.maxDate, moveRangeOnFirstSelection = _this$props.moveRangeOnFirstSelection, retainEndDateOnFirstSelection = _this$props.retainEndDateOnFirstSelection, disabledDates = _this$props.disabledDates;\n            var focusedRangeIndex = focusedRange[0];\n            var selectedRange = ranges[focusedRangeIndex];\n            if (!selectedRange || !onChange) return {};\n            var startDate = selectedRange.startDate, endDate = selectedRange.endDate;\n            var now = new Date();\n            var nextFocusRange;\n            if (!isSingleValue) {\n                startDate = value.startDate;\n                endDate = value.endDate;\n            } else if (focusedRange[1] === 0) {\n                // startDate selection\n                var dayOffset = (0, _differenceInCalendarDays.default)(endDate || now, startDate);\n                var calculateEndDate = function calculateEndDate() {\n                    if (moveRangeOnFirstSelection) {\n                        return (0, _addDays.default)(value, dayOffset);\n                    }\n                    if (retainEndDateOnFirstSelection) {\n                        if (!endDate || (0, _isBefore.default)(value, endDate)) {\n                            return endDate;\n                        }\n                        return value;\n                    }\n                    return value || now;\n                };\n                startDate = value;\n                endDate = calculateEndDate();\n                if (maxDate) endDate = (0, _min.default)([\n                    endDate,\n                    maxDate\n                ]);\n                nextFocusRange = [\n                    focusedRange[0],\n                    1\n                ];\n            } else {\n                endDate = value;\n            } // reverse dates if startDate before endDate\n            var isStartDateSelected = focusedRange[1] === 0;\n            if ((0, _isBefore.default)(endDate, startDate)) {\n                isStartDateSelected = !isStartDateSelected;\n                var _ref = [\n                    endDate,\n                    startDate\n                ];\n                startDate = _ref[0];\n                endDate = _ref[1];\n            }\n            var inValidDatesWithinRange = disabledDates.filter(function(disabledDate) {\n                return (0, _isWithinInterval.default)(disabledDate, {\n                    start: startDate,\n                    end: endDate\n                });\n            });\n            if (inValidDatesWithinRange.length > 0) {\n                if (isStartDateSelected) {\n                    startDate = (0, _addDays.default)((0, _max.default)(inValidDatesWithinRange), 1);\n                } else {\n                    endDate = (0, _addDays.default)((0, _min.default)(inValidDatesWithinRange), -1);\n                }\n            }\n            if (!nextFocusRange) {\n                var nextFocusRangeIndex = (0, _utils.findNextRangeIndex)(_this.props.ranges, focusedRange[0]);\n                nextFocusRange = [\n                    nextFocusRangeIndex,\n                    0\n                ];\n            }\n            return {\n                wasValid: !(inValidDatesWithinRange.length > 0),\n                range: {\n                    startDate: startDate,\n                    endDate: endDate\n                },\n                nextFocusRange: nextFocusRange\n            };\n        });\n        _defineProperty(_assertThisInitialized(_this), \"setSelection\", function(value, isSingleValue) {\n            var _this$props2 = _this.props, onChange = _this$props2.onChange, ranges = _this$props2.ranges, onRangeFocusChange = _this$props2.onRangeFocusChange;\n            var focusedRange = _this.props.focusedRange || _this.state.focusedRange;\n            var focusedRangeIndex = focusedRange[0];\n            var selectedRange = ranges[focusedRangeIndex];\n            if (!selectedRange) return;\n            var newSelection = _this.calcNewSelection(value, isSingleValue);\n            onChange(_defineProperty({}, selectedRange.key || \"range\".concat(focusedRangeIndex + 1), _objectSpread(_objectSpread({}, selectedRange), newSelection.range)));\n            _this.setState({\n                focusedRange: newSelection.nextFocusRange,\n                preview: null\n            });\n            onRangeFocusChange && onRangeFocusChange(newSelection.nextFocusRange);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleRangeFocusChange\", function(focusedRange) {\n            _this.setState({\n                focusedRange: focusedRange\n            });\n            _this.props.onRangeFocusChange && _this.props.onRangeFocusChange(focusedRange);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"updatePreview\", function(val) {\n            var _ranges$focusedRange$;\n            if (!val) {\n                _this.setState({\n                    preview: null\n                });\n                return;\n            }\n            var _this$props3 = _this.props, rangeColors = _this$props3.rangeColors, ranges = _this$props3.ranges;\n            var focusedRange = _this.props.focusedRange || _this.state.focusedRange;\n            var color = ((_ranges$focusedRange$ = ranges[focusedRange[0]]) === null || _ranges$focusedRange$ === void 0 ? void 0 : _ranges$focusedRange$.color) || rangeColors[focusedRange[0]] || color;\n            _this.setState({\n                preview: _objectSpread(_objectSpread({}, val.range), {}, {\n                    color: color\n                })\n            });\n        });\n        _this.state = {\n            focusedRange: props.initialFocusedRange || [\n                (0, _utils.findNextRangeIndex)(props.ranges),\n                0\n            ],\n            preview: null\n        };\n        _this.styles = (0, _utils.generateStyles)([\n            _styles.default,\n            props.classNames\n        ]);\n        return _this;\n    }\n    _createClass(DateRange, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this2 = this;\n                return /*#__PURE__*/ _react.default.createElement(_Calendar.default, _extends({\n                    focusedRange: this.state.focusedRange,\n                    onRangeFocusChange: this.handleRangeFocusChange,\n                    preview: this.state.preview,\n                    onPreviewChange: function onPreviewChange(value) {\n                        _this2.updatePreview(value ? _this2.calcNewSelection(value) : null);\n                    }\n                }, this.props, {\n                    displayMode: \"dateRange\",\n                    className: (0, _classnames.default)(this.styles.dateRangeWrapper, this.props.className),\n                    onChange: this.setSelection,\n                    updateRange: function updateRange(val) {\n                        return _this2.setSelection(val, false);\n                    },\n                    ref: function ref(target) {\n                        _this2.calendar = target;\n                    }\n                }));\n            }\n        }\n    ]);\n    return DateRange;\n}(_react.Component);\nDateRange.defaultProps = {\n    classNames: {},\n    ranges: [],\n    moveRangeOnFirstSelection: false,\n    retainEndDateOnFirstSelection: false,\n    rangeColors: [\n        \"#3d91ff\",\n        \"#3ecf8e\",\n        \"#fed14c\"\n    ],\n    disabledDates: []\n};\nDateRange.propTypes = _objectSpread(_objectSpread({}, _Calendar.default.propTypes), {}, {\n    onChange: _propTypes.default.func,\n    onRangeFocusChange: _propTypes.default.func,\n    className: _propTypes.default.string,\n    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),\n    moveRangeOnFirstSelection: _propTypes.default.bool,\n    retainEndDateOnFirstSelection: _propTypes.default.bool\n});\nvar _default = DateRange;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/DateRange/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/DayCell/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.rangeShape = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _classnames4 = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _endOfDay = _interopRequireDefault(__webpack_require__(/*! date-fns/endOfDay */ \"(ssr)/./node_modules/date-fns/esm/endOfDay/index.js\"));\nvar _isBefore = _interopRequireDefault(__webpack_require__(/*! date-fns/isBefore */ \"(ssr)/./node_modules/date-fns/esm/isBefore/index.js\"));\nvar _isAfter = _interopRequireDefault(__webpack_require__(/*! date-fns/isAfter */ \"(ssr)/./node_modules/date-fns/esm/isAfter/index.js\"));\nvar _isSameDay = _interopRequireDefault(__webpack_require__(/*! date-fns/isSameDay */ \"(ssr)/./node_modules/date-fns/esm/isSameDay/index.js\"));\nvar _format = _interopRequireDefault(__webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/esm/format/index.js\"));\nvar _startOfDay = _interopRequireDefault(__webpack_require__(/*! date-fns/startOfDay */ \"(ssr)/./node_modules/date-fns/esm/startOfDay/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar DayCell = /*#__PURE__*/ function(_Component) {\n    _inherits(DayCell, _Component);\n    var _super = _createSuper(DayCell);\n    function DayCell(props, context) {\n        var _this;\n        _classCallCheck(this, DayCell);\n        _this = _super.call(this, props, context);\n        _defineProperty(_assertThisInitialized(_this), \"handleKeyEvent\", function(event) {\n            var _this$props = _this.props, day = _this$props.day, onMouseDown = _this$props.onMouseDown, onMouseUp = _this$props.onMouseUp;\n            if ([\n                13,\n                32\n            ].includes(event.keyCode)) {\n                if (event.type === \"keydown\") onMouseDown(day);\n                else onMouseUp(day);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleMouseEvent\", function(event) {\n            var _this$props2 = _this.props, day = _this$props2.day, disabled = _this$props2.disabled, onPreviewChange = _this$props2.onPreviewChange, onMouseEnter = _this$props2.onMouseEnter, onMouseDown = _this$props2.onMouseDown, onMouseUp = _this$props2.onMouseUp;\n            var stateChanges = {};\n            if (disabled) {\n                onPreviewChange();\n                return;\n            }\n            switch(event.type){\n                case \"mouseenter\":\n                    onMouseEnter(day);\n                    onPreviewChange(day);\n                    stateChanges.hover = true;\n                    break;\n                case \"blur\":\n                case \"mouseleave\":\n                    stateChanges.hover = false;\n                    break;\n                case \"mousedown\":\n                    stateChanges.active = true;\n                    onMouseDown(day);\n                    break;\n                case \"mouseup\":\n                    event.stopPropagation();\n                    stateChanges.active = false;\n                    onMouseUp(day);\n                    break;\n                case \"focus\":\n                    onPreviewChange(day);\n                    break;\n            }\n            if (Object.keys(stateChanges).length) {\n                _this.setState(stateChanges);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getClassNames\", function() {\n            var _classnames;\n            var _this$props3 = _this.props, isPassive = _this$props3.isPassive, isToday = _this$props3.isToday, isWeekend = _this$props3.isWeekend, isStartOfWeek = _this$props3.isStartOfWeek, isEndOfWeek = _this$props3.isEndOfWeek, isStartOfMonth = _this$props3.isStartOfMonth, isEndOfMonth = _this$props3.isEndOfMonth, disabled = _this$props3.disabled, styles = _this$props3.styles;\n            return (0, _classnames4.default)(styles.day, (_classnames = {}, _defineProperty(_classnames, styles.dayPassive, isPassive), _defineProperty(_classnames, styles.dayDisabled, disabled), _defineProperty(_classnames, styles.dayToday, isToday), _defineProperty(_classnames, styles.dayWeekend, isWeekend), _defineProperty(_classnames, styles.dayStartOfWeek, isStartOfWeek), _defineProperty(_classnames, styles.dayEndOfWeek, isEndOfWeek), _defineProperty(_classnames, styles.dayStartOfMonth, isStartOfMonth), _defineProperty(_classnames, styles.dayEndOfMonth, isEndOfMonth), _defineProperty(_classnames, styles.dayHovered, _this.state.hover), _defineProperty(_classnames, styles.dayActive, _this.state.active), _classnames));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"renderPreviewPlaceholder\", function() {\n            var _classnames2;\n            var _this$props4 = _this.props, preview = _this$props4.preview, day = _this$props4.day, styles = _this$props4.styles;\n            if (!preview) return null;\n            var startDate = preview.startDate ? (0, _endOfDay.default)(preview.startDate) : null;\n            var endDate = preview.endDate ? (0, _startOfDay.default)(preview.endDate) : null;\n            var isInRange = (!startDate || (0, _isAfter.default)(day, startDate)) && (!endDate || (0, _isBefore.default)(day, endDate));\n            var isStartEdge = !isInRange && (0, _isSameDay.default)(day, startDate);\n            var isEndEdge = !isInRange && (0, _isSameDay.default)(day, endDate);\n            return /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: (0, _classnames4.default)((_classnames2 = {}, _defineProperty(_classnames2, styles.dayStartPreview, isStartEdge), _defineProperty(_classnames2, styles.dayInPreview, isInRange), _defineProperty(_classnames2, styles.dayEndPreview, isEndEdge), _classnames2)),\n                style: {\n                    color: preview.color\n                }\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"renderSelectionPlaceholders\", function() {\n            var _this$props5 = _this.props, styles = _this$props5.styles, ranges = _this$props5.ranges, day = _this$props5.day;\n            if (_this.props.displayMode === \"date\") {\n                var isSelected = (0, _isSameDay.default)(_this.props.day, _this.props.date);\n                return isSelected ? /*#__PURE__*/ _react.default.createElement(\"span\", {\n                    className: styles.selected,\n                    style: {\n                        color: _this.props.color\n                    }\n                }) : null;\n            }\n            var inRanges = ranges.reduce(function(result, range) {\n                var startDate = range.startDate;\n                var endDate = range.endDate;\n                if (startDate && endDate && (0, _isBefore.default)(endDate, startDate)) {\n                    var _ref = [\n                        endDate,\n                        startDate\n                    ];\n                    startDate = _ref[0];\n                    endDate = _ref[1];\n                }\n                startDate = startDate ? (0, _endOfDay.default)(startDate) : null;\n                endDate = endDate ? (0, _startOfDay.default)(endDate) : null;\n                var isInRange = (!startDate || (0, _isAfter.default)(day, startDate)) && (!endDate || (0, _isBefore.default)(day, endDate));\n                var isStartEdge = !isInRange && (0, _isSameDay.default)(day, startDate);\n                var isEndEdge = !isInRange && (0, _isSameDay.default)(day, endDate);\n                if (isInRange || isStartEdge || isEndEdge) {\n                    return [].concat(_toConsumableArray(result), [\n                        _objectSpread({\n                            isStartEdge: isStartEdge,\n                            isEndEdge: isEndEdge,\n                            isInRange: isInRange\n                        }, range)\n                    ]);\n                }\n                return result;\n            }, []);\n            return inRanges.map(function(range, i) {\n                var _classnames3;\n                return /*#__PURE__*/ _react.default.createElement(\"span\", {\n                    key: i,\n                    className: (0, _classnames4.default)((_classnames3 = {}, _defineProperty(_classnames3, styles.startEdge, range.isStartEdge), _defineProperty(_classnames3, styles.endEdge, range.isEndEdge), _defineProperty(_classnames3, styles.inRange, range.isInRange), _classnames3)),\n                    style: {\n                        color: range.color || _this.props.color\n                    }\n                });\n            });\n        });\n        _this.state = {\n            hover: false,\n            active: false\n        };\n        return _this;\n    }\n    _createClass(DayCell, [\n        {\n            key: \"render\",\n            value: function render() {\n                var dayContentRenderer = this.props.dayContentRenderer;\n                return /*#__PURE__*/ _react.default.createElement(\"button\", _extends({\n                    type: \"button\",\n                    onMouseEnter: this.handleMouseEvent,\n                    onMouseLeave: this.handleMouseEvent,\n                    onFocus: this.handleMouseEvent,\n                    onMouseDown: this.handleMouseEvent,\n                    onMouseUp: this.handleMouseEvent,\n                    onBlur: this.handleMouseEvent,\n                    onPauseCapture: this.handleMouseEvent,\n                    onKeyDown: this.handleKeyEvent,\n                    onKeyUp: this.handleKeyEvent,\n                    className: this.getClassNames(this.props.styles)\n                }, this.props.disabled || this.props.isPassive ? {\n                    tabIndex: -1\n                } : {}, {\n                    style: {\n                        color: this.props.color\n                    }\n                }), this.renderSelectionPlaceholders(), this.renderPreviewPlaceholder(), /*#__PURE__*/ _react.default.createElement(\"span\", {\n                    className: this.props.styles.dayNumber\n                }, (dayContentRenderer === null || dayContentRenderer === void 0 ? void 0 : dayContentRenderer(this.props.day)) || /*#__PURE__*/ _react.default.createElement(\"span\", null, (0, _format.default)(this.props.day, this.props.dayDisplayFormat))));\n            }\n        }\n    ]);\n    return DayCell;\n}(_react.Component);\nDayCell.defaultProps = {};\nvar rangeShape = _propTypes.default.shape({\n    startDate: _propTypes.default.object,\n    endDate: _propTypes.default.object,\n    color: _propTypes.default.string,\n    key: _propTypes.default.string,\n    autoFocus: _propTypes.default.bool,\n    disabled: _propTypes.default.bool,\n    showDateDisplay: _propTypes.default.bool\n});\nexports.rangeShape = rangeShape;\nDayCell.propTypes = {\n    day: _propTypes.default.object.isRequired,\n    dayDisplayFormat: _propTypes.default.string,\n    date: _propTypes.default.object,\n    ranges: _propTypes.default.arrayOf(rangeShape),\n    preview: _propTypes.default.shape({\n        startDate: _propTypes.default.object,\n        endDate: _propTypes.default.object,\n        color: _propTypes.default.string\n    }),\n    onPreviewChange: _propTypes.default.func,\n    previewColor: _propTypes.default.string,\n    disabled: _propTypes.default.bool,\n    isPassive: _propTypes.default.bool,\n    isToday: _propTypes.default.bool,\n    isWeekend: _propTypes.default.bool,\n    isStartOfWeek: _propTypes.default.bool,\n    isEndOfWeek: _propTypes.default.bool,\n    isStartOfMonth: _propTypes.default.bool,\n    isEndOfMonth: _propTypes.default.bool,\n    color: _propTypes.default.string,\n    displayMode: _propTypes.default.oneOf([\n        \"dateRange\",\n        \"date\"\n    ]),\n    styles: _propTypes.default.object,\n    onMouseDown: _propTypes.default.func,\n    onMouseUp: _propTypes.default.func,\n    onMouseEnter: _propTypes.default.func,\n    dayContentRenderer: _propTypes.default.func\n};\nvar _default = DayCell;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/DefinedRange/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/DefinedRange/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _styles = _interopRequireDefault(__webpack_require__(/*! ../../styles */ \"(ssr)/./node_modules/react-date-range/dist/styles.js\"));\nvar _defaultRanges = __webpack_require__(/*! ../../defaultRanges */ \"(ssr)/./node_modules/react-date-range/dist/defaultRanges.js\");\nvar _DayCell = __webpack_require__(/*! ../DayCell */ \"(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js\");\nvar _InputRangeField = _interopRequireDefault(__webpack_require__(/*! ../InputRangeField */ \"(ssr)/./node_modules/react-date-range/dist/components/InputRangeField/index.js\"));\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar DefinedRange = /*#__PURE__*/ function(_Component) {\n    _inherits(DefinedRange, _Component);\n    var _super = _createSuper(DefinedRange);\n    function DefinedRange(props) {\n        var _this;\n        _classCallCheck(this, DefinedRange);\n        _this = _super.call(this, props);\n        _defineProperty(_assertThisInitialized(_this), \"handleRangeChange\", function(range) {\n            var _this$props = _this.props, onChange = _this$props.onChange, ranges = _this$props.ranges, focusedRange = _this$props.focusedRange;\n            var selectedRange = ranges[focusedRange[0]];\n            if (!onChange || !selectedRange) return;\n            onChange(_defineProperty({}, selectedRange.key || \"range\".concat(focusedRange[0] + 1), _objectSpread(_objectSpread({}, selectedRange), range)));\n        });\n        _this.state = {\n            rangeOffset: 0,\n            focusedInput: -1\n        };\n        return _this;\n    }\n    _createClass(DefinedRange, [\n        {\n            key: \"getRangeOptionValue\",\n            value: function getRangeOptionValue(option) {\n                var _this$props2 = this.props, _this$props2$ranges = _this$props2.ranges, ranges = _this$props2$ranges === void 0 ? [] : _this$props2$ranges, _this$props2$focusedR = _this$props2.focusedRange, focusedRange = _this$props2$focusedR === void 0 ? [] : _this$props2$focusedR;\n                if (typeof option.getCurrentValue !== \"function\") {\n                    return \"\";\n                }\n                var selectedRange = ranges[focusedRange[0]] || {};\n                return option.getCurrentValue(selectedRange) || \"\";\n            }\n        },\n        {\n            key: \"getSelectedRange\",\n            value: function getSelectedRange(ranges, staticRange) {\n                var focusedRangeIndex = ranges.findIndex(function(range) {\n                    if (!range.startDate || !range.endDate || range.disabled) return false;\n                    return staticRange.isSelected(range);\n                });\n                var selectedRange = ranges[focusedRangeIndex];\n                return {\n                    selectedRange: selectedRange,\n                    focusedRangeIndex: focusedRangeIndex\n                };\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this2 = this;\n                var _this$props3 = this.props, headerContent = _this$props3.headerContent, footerContent = _this$props3.footerContent, onPreviewChange = _this$props3.onPreviewChange, inputRanges = _this$props3.inputRanges, staticRanges = _this$props3.staticRanges, ranges = _this$props3.ranges, renderStaticRangeLabel = _this$props3.renderStaticRangeLabel, rangeColors = _this$props3.rangeColors, className = _this$props3.className;\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: (0, _classnames.default)(_styles.default.definedRangesWrapper, className)\n                }, headerContent, /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: _styles.default.staticRanges\n                }, staticRanges.map(function(staticRange, i) {\n                    var _this2$getSelectedRan = _this2.getSelectedRange(ranges, staticRange), selectedRange = _this2$getSelectedRan.selectedRange, focusedRangeIndex = _this2$getSelectedRan.focusedRangeIndex;\n                    var labelContent;\n                    if (staticRange.hasCustomRendering) {\n                        labelContent = renderStaticRangeLabel(staticRange);\n                    } else {\n                        labelContent = staticRange.label;\n                    }\n                    return /*#__PURE__*/ _react.default.createElement(\"button\", {\n                        type: \"button\",\n                        className: (0, _classnames.default)(_styles.default.staticRange, _defineProperty({}, _styles.default.staticRangeSelected, Boolean(selectedRange))),\n                        style: {\n                            color: selectedRange ? selectedRange.color || rangeColors[focusedRangeIndex] : null\n                        },\n                        key: i,\n                        onClick: function onClick() {\n                            return _this2.handleRangeChange(staticRange.range(_this2.props));\n                        },\n                        onFocus: function onFocus() {\n                            return onPreviewChange && onPreviewChange(staticRange.range(_this2.props));\n                        },\n                        onMouseOver: function onMouseOver() {\n                            return onPreviewChange && onPreviewChange(staticRange.range(_this2.props));\n                        },\n                        onMouseLeave: function onMouseLeave() {\n                            onPreviewChange && onPreviewChange();\n                        }\n                    }, /*#__PURE__*/ _react.default.createElement(\"span\", {\n                        tabIndex: -1,\n                        className: _styles.default.staticRangeLabel\n                    }, labelContent));\n                })), /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: _styles.default.inputRanges\n                }, inputRanges.map(function(rangeOption, i) {\n                    return /*#__PURE__*/ _react.default.createElement(_InputRangeField.default, {\n                        key: i,\n                        styles: _styles.default,\n                        label: rangeOption.label,\n                        onFocus: function onFocus() {\n                            return _this2.setState({\n                                focusedInput: i,\n                                rangeOffset: 0\n                            });\n                        },\n                        onBlur: function onBlur() {\n                            return _this2.setState({\n                                rangeOffset: 0\n                            });\n                        },\n                        onChange: function onChange(value) {\n                            return _this2.handleRangeChange(rangeOption.range(value, _this2.props));\n                        },\n                        value: _this2.getRangeOptionValue(rangeOption)\n                    });\n                })), footerContent);\n            }\n        }\n    ]);\n    return DefinedRange;\n}(_react.Component);\nDefinedRange.propTypes = {\n    inputRanges: _propTypes.default.array,\n    staticRanges: _propTypes.default.array,\n    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),\n    focusedRange: _propTypes.default.arrayOf(_propTypes.default.number),\n    onPreviewChange: _propTypes.default.func,\n    onChange: _propTypes.default.func,\n    footerContent: _propTypes.default.any,\n    headerContent: _propTypes.default.any,\n    rangeColors: _propTypes.default.arrayOf(_propTypes.default.string),\n    className: _propTypes.default.string,\n    renderStaticRangeLabel: _propTypes.default.func\n};\nDefinedRange.defaultProps = {\n    inputRanges: _defaultRanges.defaultInputRanges,\n    staticRanges: _defaultRanges.defaultStaticRanges,\n    ranges: [],\n    rangeColors: [\n        \"#3d91ff\",\n        \"#3ecf8e\",\n        \"#fed14c\"\n    ],\n    focusedRange: [\n        0,\n        0\n    ]\n};\nvar _default = DefinedRange;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/DefinedRange/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/InputRangeField/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/InputRangeField/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar MIN = 0;\nvar MAX = 99999;\nvar InputRangeField = /*#__PURE__*/ function(_Component) {\n    _inherits(InputRangeField, _Component);\n    var _super = _createSuper(InputRangeField);\n    function InputRangeField(props, context) {\n        var _this;\n        _classCallCheck(this, InputRangeField);\n        _this = _super.call(this, props, context);\n        _defineProperty(_assertThisInitialized(_this), \"onChange\", function(e) {\n            var onChange = _this.props.onChange;\n            var value = parseInt(e.target.value, 10);\n            value = isNaN(value) ? 0 : Math.max(Math.min(MAX, value), MIN);\n            onChange(value);\n        });\n        return _this;\n    }\n    _createClass(InputRangeField, [\n        {\n            key: \"shouldComponentUpdate\",\n            value: function shouldComponentUpdate(nextProps) {\n                var _this$props = this.props, value = _this$props.value, label = _this$props.label, placeholder = _this$props.placeholder;\n                return value !== nextProps.value || label !== nextProps.label || placeholder !== nextProps.placeholder;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props2 = this.props, label = _this$props2.label, placeholder = _this$props2.placeholder, value = _this$props2.value, styles = _this$props2.styles, onBlur = _this$props2.onBlur, onFocus = _this$props2.onFocus;\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: styles.inputRange\n                }, /*#__PURE__*/ _react.default.createElement(\"input\", {\n                    className: styles.inputRangeInput,\n                    placeholder: placeholder,\n                    value: value,\n                    min: MIN,\n                    max: MAX,\n                    onChange: this.onChange,\n                    onFocus: onFocus,\n                    onBlur: onBlur\n                }), /*#__PURE__*/ _react.default.createElement(\"span\", {\n                    className: styles.inputRangeLabel\n                }, label));\n            }\n        }\n    ]);\n    return InputRangeField;\n}(_react.Component);\nInputRangeField.propTypes = {\n    value: _propTypes.default.oneOfType([\n        _propTypes.default.string,\n        _propTypes.default.number\n    ]),\n    label: _propTypes.default.oneOfType([\n        _propTypes.default.element,\n        _propTypes.default.node\n    ]).isRequired,\n    placeholder: _propTypes.default.string,\n    styles: _propTypes.default.shape({\n        inputRange: _propTypes.default.string,\n        inputRangeInput: _propTypes.default.string,\n        inputRangeLabel: _propTypes.default.string\n    }).isRequired,\n    onBlur: _propTypes.default.func.isRequired,\n    onFocus: _propTypes.default.func.isRequired,\n    onChange: _propTypes.default.func.isRequired\n};\nInputRangeField.defaultProps = {\n    value: \"\",\n    placeholder: \"-\"\n};\nvar _default = InputRangeField;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/InputRangeField/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/Month/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/Month/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _DayCell = _interopRequireWildcard(__webpack_require__(/*! ../DayCell */ \"(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js\"));\nvar _eachDayOfInterval = _interopRequireDefault(__webpack_require__(/*! date-fns/eachDayOfInterval */ \"(ssr)/./node_modules/date-fns/esm/eachDayOfInterval/index.js\"));\nvar _isWithinInterval = _interopRequireDefault(__webpack_require__(/*! date-fns/isWithinInterval */ \"(ssr)/./node_modules/date-fns/esm/isWithinInterval/index.js\"));\nvar _isWeekend = _interopRequireDefault(__webpack_require__(/*! date-fns/isWeekend */ \"(ssr)/./node_modules/date-fns/esm/isWeekend/index.js\"));\nvar _isAfter = _interopRequireDefault(__webpack_require__(/*! date-fns/isAfter */ \"(ssr)/./node_modules/date-fns/esm/isAfter/index.js\"));\nvar _isSameDay = _interopRequireDefault(__webpack_require__(/*! date-fns/isSameDay */ \"(ssr)/./node_modules/date-fns/esm/isSameDay/index.js\"));\nvar _isBefore = _interopRequireDefault(__webpack_require__(/*! date-fns/isBefore */ \"(ssr)/./node_modules/date-fns/esm/isBefore/index.js\"));\nvar _endOfWeek = _interopRequireDefault(__webpack_require__(/*! date-fns/endOfWeek */ \"(ssr)/./node_modules/date-fns/esm/endOfWeek/index.js\"));\nvar _startOfWeek = _interopRequireDefault(__webpack_require__(/*! date-fns/startOfWeek */ \"(ssr)/./node_modules/date-fns/esm/startOfWeek/index.js\"));\nvar _endOfDay = _interopRequireDefault(__webpack_require__(/*! date-fns/endOfDay */ \"(ssr)/./node_modules/date-fns/esm/endOfDay/index.js\"));\nvar _startOfDay = _interopRequireDefault(__webpack_require__(/*! date-fns/startOfDay */ \"(ssr)/./node_modules/date-fns/esm/startOfDay/index.js\"));\nvar _format = _interopRequireDefault(__webpack_require__(/*! date-fns/format */ \"(ssr)/./node_modules/date-fns/esm/format/index.js\"));\nvar _utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/react-date-range/dist/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction renderWeekdays(styles, dateOptions, weekdayDisplayFormat) {\n    var now = new Date();\n    return /*#__PURE__*/ _react.default.createElement(\"div\", {\n        className: styles.weekDays\n    }, (0, _eachDayOfInterval.default)({\n        start: (0, _startOfWeek.default)(now, dateOptions),\n        end: (0, _endOfWeek.default)(now, dateOptions)\n    }).map(function(day, i) {\n        return /*#__PURE__*/ _react.default.createElement(\"span\", {\n            className: styles.weekDay,\n            key: i\n        }, (0, _format.default)(day, weekdayDisplayFormat, dateOptions));\n    }));\n}\nvar Month = /*#__PURE__*/ function(_PureComponent) {\n    _inherits(Month, _PureComponent);\n    var _super = _createSuper(Month);\n    function Month() {\n        _classCallCheck(this, Month);\n        return _super.apply(this, arguments);\n    }\n    _createClass(Month, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this = this;\n                var now = new Date();\n                var _this$props = this.props, displayMode = _this$props.displayMode, focusedRange = _this$props.focusedRange, drag = _this$props.drag, styles = _this$props.styles, disabledDates = _this$props.disabledDates, disabledDay = _this$props.disabledDay;\n                var minDate = this.props.minDate && (0, _startOfDay.default)(this.props.minDate);\n                var maxDate = this.props.maxDate && (0, _endOfDay.default)(this.props.maxDate);\n                var monthDisplay = (0, _utils.getMonthDisplayRange)(this.props.month, this.props.dateOptions, this.props.fixedHeight);\n                var ranges = this.props.ranges;\n                if (displayMode === \"dateRange\" && drag.status) {\n                    var _drag$range = drag.range, startDate = _drag$range.startDate, endDate = _drag$range.endDate;\n                    ranges = ranges.map(function(range, i) {\n                        if (i !== focusedRange[0]) return range;\n                        return _objectSpread(_objectSpread({}, range), {}, {\n                            startDate: startDate,\n                            endDate: endDate\n                        });\n                    });\n                }\n                var showPreview = this.props.showPreview && !drag.disablePreview;\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: styles.month,\n                    style: this.props.style\n                }, this.props.showMonthName ? /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: styles.monthName\n                }, (0, _format.default)(this.props.month, this.props.monthDisplayFormat, this.props.dateOptions)) : null, this.props.showWeekDays && renderWeekdays(styles, this.props.dateOptions, this.props.weekdayDisplayFormat), /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: styles.days,\n                    onMouseLeave: this.props.onMouseLeave\n                }, (0, _eachDayOfInterval.default)({\n                    start: monthDisplay.start,\n                    end: monthDisplay.end\n                }).map(function(day, index) {\n                    var isStartOfMonth = (0, _isSameDay.default)(day, monthDisplay.startDateOfMonth);\n                    var isEndOfMonth = (0, _isSameDay.default)(day, monthDisplay.endDateOfMonth);\n                    var isOutsideMinMax = minDate && (0, _isBefore.default)(day, minDate) || maxDate && (0, _isAfter.default)(day, maxDate);\n                    var isDisabledSpecifically = disabledDates.some(function(disabledDate) {\n                        return (0, _isSameDay.default)(disabledDate, day);\n                    });\n                    var isDisabledDay = disabledDay(day);\n                    return /*#__PURE__*/ _react.default.createElement(_DayCell.default, _extends({}, _this.props, {\n                        ranges: ranges,\n                        day: day,\n                        preview: showPreview ? _this.props.preview : null,\n                        isWeekend: (0, _isWeekend.default)(day, _this.props.dateOptions),\n                        isToday: (0, _isSameDay.default)(day, now),\n                        isStartOfWeek: (0, _isSameDay.default)(day, (0, _startOfWeek.default)(day, _this.props.dateOptions)),\n                        isEndOfWeek: (0, _isSameDay.default)(day, (0, _endOfWeek.default)(day, _this.props.dateOptions)),\n                        isStartOfMonth: isStartOfMonth,\n                        isEndOfMonth: isEndOfMonth,\n                        key: index,\n                        disabled: isOutsideMinMax || isDisabledSpecifically || isDisabledDay,\n                        isPassive: !(0, _isWithinInterval.default)(day, {\n                            start: monthDisplay.startDateOfMonth,\n                            end: monthDisplay.endDateOfMonth\n                        }),\n                        styles: styles,\n                        onMouseDown: _this.props.onDragSelectionStart,\n                        onMouseUp: _this.props.onDragSelectionEnd,\n                        onMouseEnter: _this.props.onDragSelectionMove,\n                        dragRange: drag.range,\n                        drag: drag.status\n                    }));\n                })));\n            }\n        }\n    ]);\n    return Month;\n}(_react.PureComponent);\nMonth.defaultProps = {};\nMonth.propTypes = {\n    style: _propTypes.default.object,\n    styles: _propTypes.default.object,\n    month: _propTypes.default.object,\n    drag: _propTypes.default.object,\n    dateOptions: _propTypes.default.object,\n    disabledDates: _propTypes.default.array,\n    disabledDay: _propTypes.default.func,\n    preview: _propTypes.default.shape({\n        startDate: _propTypes.default.object,\n        endDate: _propTypes.default.object\n    }),\n    showPreview: _propTypes.default.bool,\n    displayMode: _propTypes.default.oneOf([\n        \"dateRange\",\n        \"date\"\n    ]),\n    minDate: _propTypes.default.object,\n    maxDate: _propTypes.default.object,\n    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),\n    focusedRange: _propTypes.default.arrayOf(_propTypes.default.number),\n    onDragSelectionStart: _propTypes.default.func,\n    onDragSelectionEnd: _propTypes.default.func,\n    onDragSelectionMove: _propTypes.default.func,\n    onMouseLeave: _propTypes.default.func,\n    monthDisplayFormat: _propTypes.default.string,\n    weekdayDisplayFormat: _propTypes.default.string,\n    dayDisplayFormat: _propTypes.default.string,\n    showWeekDays: _propTypes.default.bool,\n    showMonthName: _propTypes.default.bool,\n    fixedHeight: _propTypes.default.bool\n};\nvar _default = Month;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/Month/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/defaultRanges.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-date-range/dist/defaultRanges.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createStaticRanges = createStaticRanges;\nexports.defaultInputRanges = exports.defaultStaticRanges = void 0;\nvar _differenceInCalendarDays = _interopRequireDefault(__webpack_require__(/*! date-fns/differenceInCalendarDays */ \"(ssr)/./node_modules/date-fns/esm/differenceInCalendarDays/index.js\"));\nvar _isSameDay = _interopRequireDefault(__webpack_require__(/*! date-fns/isSameDay */ \"(ssr)/./node_modules/date-fns/esm/isSameDay/index.js\"));\nvar _endOfWeek = _interopRequireDefault(__webpack_require__(/*! date-fns/endOfWeek */ \"(ssr)/./node_modules/date-fns/esm/endOfWeek/index.js\"));\nvar _startOfWeek = _interopRequireDefault(__webpack_require__(/*! date-fns/startOfWeek */ \"(ssr)/./node_modules/date-fns/esm/startOfWeek/index.js\"));\nvar _addMonths = _interopRequireDefault(__webpack_require__(/*! date-fns/addMonths */ \"(ssr)/./node_modules/date-fns/esm/addMonths/index.js\"));\nvar _endOfMonth = _interopRequireDefault(__webpack_require__(/*! date-fns/endOfMonth */ \"(ssr)/./node_modules/date-fns/esm/endOfMonth/index.js\"));\nvar _startOfMonth = _interopRequireDefault(__webpack_require__(/*! date-fns/startOfMonth */ \"(ssr)/./node_modules/date-fns/esm/startOfMonth/index.js\"));\nvar _startOfDay = _interopRequireDefault(__webpack_require__(/*! date-fns/startOfDay */ \"(ssr)/./node_modules/date-fns/esm/startOfDay/index.js\"));\nvar _endOfDay = _interopRequireDefault(__webpack_require__(/*! date-fns/endOfDay */ \"(ssr)/./node_modules/date-fns/esm/endOfDay/index.js\"));\nvar _addDays = _interopRequireDefault(__webpack_require__(/*! date-fns/addDays */ \"(ssr)/./node_modules/date-fns/esm/addDays/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar defineds = {\n    startOfWeek: (0, _startOfWeek.default)(new Date()),\n    endOfWeek: (0, _endOfWeek.default)(new Date()),\n    startOfLastWeek: (0, _startOfWeek.default)((0, _addDays.default)(new Date(), -7)),\n    endOfLastWeek: (0, _endOfWeek.default)((0, _addDays.default)(new Date(), -7)),\n    startOfToday: (0, _startOfDay.default)(new Date()),\n    endOfToday: (0, _endOfDay.default)(new Date()),\n    startOfYesterday: (0, _startOfDay.default)((0, _addDays.default)(new Date(), -1)),\n    endOfYesterday: (0, _endOfDay.default)((0, _addDays.default)(new Date(), -1)),\n    startOfMonth: (0, _startOfMonth.default)(new Date()),\n    endOfMonth: (0, _endOfMonth.default)(new Date()),\n    startOfLastMonth: (0, _startOfMonth.default)((0, _addMonths.default)(new Date(), -1)),\n    endOfLastMonth: (0, _endOfMonth.default)((0, _addMonths.default)(new Date(), -1))\n};\nvar staticRangeHandler = {\n    range: {},\n    isSelected: function isSelected(range) {\n        var definedRange = this.range();\n        return (0, _isSameDay.default)(range.startDate, definedRange.startDate) && (0, _isSameDay.default)(range.endDate, definedRange.endDate);\n    }\n};\nfunction createStaticRanges(ranges) {\n    return ranges.map(function(range) {\n        return _objectSpread(_objectSpread({}, staticRangeHandler), range);\n    });\n}\nvar defaultStaticRanges = createStaticRanges([\n    {\n        label: \"Today\",\n        range: function range() {\n            return {\n                startDate: defineds.startOfToday,\n                endDate: defineds.endOfToday\n            };\n        }\n    },\n    {\n        label: \"Yesterday\",\n        range: function range() {\n            return {\n                startDate: defineds.startOfYesterday,\n                endDate: defineds.endOfYesterday\n            };\n        }\n    },\n    {\n        label: \"This Week\",\n        range: function range() {\n            return {\n                startDate: defineds.startOfWeek,\n                endDate: defineds.endOfWeek\n            };\n        }\n    },\n    {\n        label: \"Last Week\",\n        range: function range() {\n            return {\n                startDate: defineds.startOfLastWeek,\n                endDate: defineds.endOfLastWeek\n            };\n        }\n    },\n    {\n        label: \"This Month\",\n        range: function range() {\n            return {\n                startDate: defineds.startOfMonth,\n                endDate: defineds.endOfMonth\n            };\n        }\n    },\n    {\n        label: \"Last Month\",\n        range: function range() {\n            return {\n                startDate: defineds.startOfLastMonth,\n                endDate: defineds.endOfLastMonth\n            };\n        }\n    }\n]);\nexports.defaultStaticRanges = defaultStaticRanges;\nvar defaultInputRanges = [\n    {\n        label: \"days up to today\",\n        range: function range(value) {\n            return {\n                startDate: (0, _addDays.default)(defineds.startOfToday, (Math.max(Number(value), 1) - 1) * -1),\n                endDate: defineds.endOfToday\n            };\n        },\n        getCurrentValue: function getCurrentValue(range) {\n            if (!(0, _isSameDay.default)(range.endDate, defineds.endOfToday)) return \"-\";\n            if (!range.startDate) return \"∞\";\n            return (0, _differenceInCalendarDays.default)(defineds.endOfToday, range.startDate) + 1;\n        }\n    },\n    {\n        label: \"days starting today\",\n        range: function range(value) {\n            var today = new Date();\n            return {\n                startDate: today,\n                endDate: (0, _addDays.default)(today, Math.max(Number(value), 1) - 1)\n            };\n        },\n        getCurrentValue: function getCurrentValue(range) {\n            if (!(0, _isSameDay.default)(range.startDate, defineds.startOfToday)) return \"-\";\n            if (!range.endDate) return \"∞\";\n            return (0, _differenceInCalendarDays.default)(range.endDate, defineds.startOfToday) + 1;\n        }\n    }\n];\nexports.defaultInputRanges = defaultInputRanges;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L2RlZmF1bHRSYW5nZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELDBCQUEwQixHQUFHRTtBQUM3QkYsMEJBQTBCLEdBQUdBLDJCQUEyQixHQUFHLEtBQUs7QUFFaEUsSUFBSUssNEJBQTRCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLDhHQUFtQztBQUVsRyxJQUFJQyxhQUFhRix1QkFBdUJDLG1CQUFPQSxDQUFDLGdGQUFvQjtBQUVwRSxJQUFJRSxhQUFhSCx1QkFBdUJDLG1CQUFPQSxDQUFDLGdGQUFvQjtBQUVwRSxJQUFJRyxlQUFlSix1QkFBdUJDLG1CQUFPQSxDQUFDLG9GQUFzQjtBQUV4RSxJQUFJSSxhQUFhTCx1QkFBdUJDLG1CQUFPQSxDQUFDLGdGQUFvQjtBQUVwRSxJQUFJSyxjQUFjTix1QkFBdUJDLG1CQUFPQSxDQUFDLGtGQUFxQjtBQUV0RSxJQUFJTSxnQkFBZ0JQLHVCQUF1QkMsbUJBQU9BLENBQUMsc0ZBQXVCO0FBRTFFLElBQUlPLGNBQWNSLHVCQUF1QkMsbUJBQU9BLENBQUMsa0ZBQXFCO0FBRXRFLElBQUlRLFlBQVlULHVCQUF1QkMsbUJBQU9BLENBQUMsOEVBQW1CO0FBRWxFLElBQUlTLFdBQVdWLHVCQUF1QkMsbUJBQU9BLENBQUMsNEVBQWtCO0FBRWhFLFNBQVNELHVCQUF1QlcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFRSxTQUFTRjtJQUFJO0FBQUc7QUFFOUYsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxjQUFjO0lBQUksSUFBSUMsT0FBT3pCLE9BQU95QixJQUFJLENBQUNGO0lBQVMsSUFBSXZCLE9BQU8wQixxQkFBcUIsRUFBRTtRQUFFLElBQUlDLFVBQVUzQixPQUFPMEIscUJBQXFCLENBQUNIO1FBQVMsSUFBSUMsZ0JBQWdCO1lBQUVHLFVBQVVBLFFBQVFDLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO2dCQUFJLE9BQU83QixPQUFPOEIsd0JBQXdCLENBQUNQLFFBQVFNLEtBQUtFLFVBQVU7WUFBRTtRQUFJO1FBQUVOLEtBQUtPLElBQUksQ0FBQ0MsS0FBSyxDQUFDUixNQUFNRTtJQUFVO0lBQUUsT0FBT0Y7QUFBTTtBQUV4VixTQUFTUyxjQUFjQyxNQUFNO0lBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztRQUFFLElBQUlHLFNBQVNGLFNBQVMsQ0FBQ0QsRUFBRSxJQUFJLE9BQU9DLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHLENBQUM7UUFBRyxJQUFJQSxJQUFJLEdBQUc7WUFBRWQsUUFBUXRCLE9BQU91QyxTQUFTLE1BQU1DLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO2dCQUFJQyxnQkFBZ0JQLFFBQVFNLEtBQUtGLE1BQU0sQ0FBQ0UsSUFBSTtZQUFHO1FBQUksT0FBTyxJQUFJekMsT0FBTzJDLHlCQUF5QixFQUFFO1lBQUUzQyxPQUFPNEMsZ0JBQWdCLENBQUNULFFBQVFuQyxPQUFPMkMseUJBQXlCLENBQUNKO1FBQVUsT0FBTztZQUFFakIsUUFBUXRCLE9BQU91QyxTQUFTQyxPQUFPLENBQUMsU0FBVUMsR0FBRztnQkFBSXpDLE9BQU9DLGNBQWMsQ0FBQ2tDLFFBQVFNLEtBQUt6QyxPQUFPOEIsd0JBQXdCLENBQUNTLFFBQVFFO1lBQU87UUFBSTtJQUFFO0lBQUUsT0FBT047QUFBUTtBQUVyaEIsU0FBU08sZ0JBQWdCdkIsR0FBRyxFQUFFc0IsR0FBRyxFQUFFdEMsS0FBSztJQUFJLElBQUlzQyxPQUFPdEIsS0FBSztRQUFFbkIsT0FBT0MsY0FBYyxDQUFDa0IsS0FBS3NCLEtBQUs7WUFBRXRDLE9BQU9BO1lBQU80QixZQUFZO1lBQU1jLGNBQWM7WUFBTUMsVUFBVTtRQUFLO0lBQUksT0FBTztRQUFFM0IsR0FBRyxDQUFDc0IsSUFBSSxHQUFHdEM7SUFBTztJQUFFLE9BQU9nQjtBQUFLO0FBRWhOLElBQUk0QixXQUFXO0lBQ2JDLGFBQWEsQ0FBQyxHQUFHcEMsYUFBYVMsT0FBTyxFQUFFLElBQUk0QjtJQUMzQ0MsV0FBVyxDQUFDLEdBQUd2QyxXQUFXVSxPQUFPLEVBQUUsSUFBSTRCO0lBQ3ZDRSxpQkFBaUIsQ0FBQyxHQUFHdkMsYUFBYVMsT0FBTyxFQUFFLENBQUMsR0FBR0gsU0FBU0csT0FBTyxFQUFFLElBQUk0QixRQUFRLENBQUM7SUFDOUVHLGVBQWUsQ0FBQyxHQUFHekMsV0FBV1UsT0FBTyxFQUFFLENBQUMsR0FBR0gsU0FBU0csT0FBTyxFQUFFLElBQUk0QixRQUFRLENBQUM7SUFDMUVJLGNBQWMsQ0FBQyxHQUFHckMsWUFBWUssT0FBTyxFQUFFLElBQUk0QjtJQUMzQ0ssWUFBWSxDQUFDLEdBQUdyQyxVQUFVSSxPQUFPLEVBQUUsSUFBSTRCO0lBQ3ZDTSxrQkFBa0IsQ0FBQyxHQUFHdkMsWUFBWUssT0FBTyxFQUFFLENBQUMsR0FBR0gsU0FBU0csT0FBTyxFQUFFLElBQUk0QixRQUFRLENBQUM7SUFDOUVPLGdCQUFnQixDQUFDLEdBQUd2QyxVQUFVSSxPQUFPLEVBQUUsQ0FBQyxHQUFHSCxTQUFTRyxPQUFPLEVBQUUsSUFBSTRCLFFBQVEsQ0FBQztJQUMxRVEsY0FBYyxDQUFDLEdBQUcxQyxjQUFjTSxPQUFPLEVBQUUsSUFBSTRCO0lBQzdDUyxZQUFZLENBQUMsR0FBRzVDLFlBQVlPLE9BQU8sRUFBRSxJQUFJNEI7SUFDekNVLGtCQUFrQixDQUFDLEdBQUc1QyxjQUFjTSxPQUFPLEVBQUUsQ0FBQyxHQUFHUixXQUFXUSxPQUFPLEVBQUUsSUFBSTRCLFFBQVEsQ0FBQztJQUNsRlcsZ0JBQWdCLENBQUMsR0FBRzlDLFlBQVlPLE9BQU8sRUFBRSxDQUFDLEdBQUdSLFdBQVdRLE9BQU8sRUFBRSxJQUFJNEIsUUFBUSxDQUFDO0FBQ2hGO0FBQ0EsSUFBSVkscUJBQXFCO0lBQ3ZCQyxPQUFPLENBQUM7SUFDUkMsWUFBWSxTQUFTQSxXQUFXRCxLQUFLO1FBQ25DLElBQUlFLGVBQWUsSUFBSSxDQUFDRixLQUFLO1FBQzdCLE9BQU8sQ0FBQyxHQUFHcEQsV0FBV1csT0FBTyxFQUFFeUMsTUFBTUcsU0FBUyxFQUFFRCxhQUFhQyxTQUFTLEtBQUssQ0FBQyxHQUFHdkQsV0FBV1csT0FBTyxFQUFFeUMsTUFBTUksT0FBTyxFQUFFRixhQUFhRSxPQUFPO0lBQ3hJO0FBQ0Y7QUFFQSxTQUFTOUQsbUJBQW1CK0QsTUFBTTtJQUNoQyxPQUFPQSxPQUFPQyxHQUFHLENBQUMsU0FBVU4sS0FBSztRQUMvQixPQUFPNUIsY0FBY0EsY0FBYyxDQUFDLEdBQUcyQixxQkFBcUJDO0lBQzlEO0FBQ0Y7QUFFQSxJQUFJeEQsc0JBQXNCRixtQkFBbUI7SUFBQztRQUM1Q2lFLE9BQU87UUFDUFAsT0FBTyxTQUFTQTtZQUNkLE9BQU87Z0JBQ0xHLFdBQVdsQixTQUFTTSxZQUFZO2dCQUNoQ2EsU0FBU25CLFNBQVNPLFVBQVU7WUFDOUI7UUFDRjtJQUNGO0lBQUc7UUFDRGUsT0FBTztRQUNQUCxPQUFPLFNBQVNBO1lBQ2QsT0FBTztnQkFDTEcsV0FBV2xCLFNBQVNRLGdCQUFnQjtnQkFDcENXLFNBQVNuQixTQUFTUyxjQUFjO1lBQ2xDO1FBQ0Y7SUFDRjtJQUFHO1FBQ0RhLE9BQU87UUFDUFAsT0FBTyxTQUFTQTtZQUNkLE9BQU87Z0JBQ0xHLFdBQVdsQixTQUFTQyxXQUFXO2dCQUMvQmtCLFNBQVNuQixTQUFTRyxTQUFTO1lBQzdCO1FBQ0Y7SUFDRjtJQUFHO1FBQ0RtQixPQUFPO1FBQ1BQLE9BQU8sU0FBU0E7WUFDZCxPQUFPO2dCQUNMRyxXQUFXbEIsU0FBU0ksZUFBZTtnQkFDbkNlLFNBQVNuQixTQUFTSyxhQUFhO1lBQ2pDO1FBQ0Y7SUFDRjtJQUFHO1FBQ0RpQixPQUFPO1FBQ1BQLE9BQU8sU0FBU0E7WUFDZCxPQUFPO2dCQUNMRyxXQUFXbEIsU0FBU1UsWUFBWTtnQkFDaENTLFNBQVNuQixTQUFTVyxVQUFVO1lBQzlCO1FBQ0Y7SUFDRjtJQUFHO1FBQ0RXLE9BQU87UUFDUFAsT0FBTyxTQUFTQTtZQUNkLE9BQU87Z0JBQ0xHLFdBQVdsQixTQUFTWSxnQkFBZ0I7Z0JBQ3BDTyxTQUFTbkIsU0FBU2EsY0FBYztZQUNsQztRQUNGO0lBQ0Y7Q0FBRTtBQUNGMUQsMkJBQTJCLEdBQUdJO0FBQzlCLElBQUlELHFCQUFxQjtJQUFDO1FBQ3hCZ0UsT0FBTztRQUNQUCxPQUFPLFNBQVNBLE1BQU0zRCxLQUFLO1lBQ3pCLE9BQU87Z0JBQ0w4RCxXQUFXLENBQUMsR0FBRy9DLFNBQVNHLE9BQU8sRUFBRTBCLFNBQVNNLFlBQVksRUFBRSxDQUFDaUIsS0FBS0MsR0FBRyxDQUFDQyxPQUFPckUsUUFBUSxLQUFLLEtBQUssQ0FBQztnQkFDNUYrRCxTQUFTbkIsU0FBU08sVUFBVTtZQUM5QjtRQUNGO1FBQ0FtQixpQkFBaUIsU0FBU0EsZ0JBQWdCWCxLQUFLO1lBQzdDLElBQUksQ0FBQyxDQUFDLEdBQUdwRCxXQUFXVyxPQUFPLEVBQUV5QyxNQUFNSSxPQUFPLEVBQUVuQixTQUFTTyxVQUFVLEdBQUcsT0FBTztZQUN6RSxJQUFJLENBQUNRLE1BQU1HLFNBQVMsRUFBRSxPQUFPO1lBQzdCLE9BQU8sQ0FBQyxHQUFHMUQsMEJBQTBCYyxPQUFPLEVBQUUwQixTQUFTTyxVQUFVLEVBQUVRLE1BQU1HLFNBQVMsSUFBSTtRQUN4RjtJQUNGO0lBQUc7UUFDREksT0FBTztRQUNQUCxPQUFPLFNBQVNBLE1BQU0zRCxLQUFLO1lBQ3pCLElBQUl1RSxRQUFRLElBQUl6QjtZQUNoQixPQUFPO2dCQUNMZ0IsV0FBV1M7Z0JBQ1hSLFNBQVMsQ0FBQyxHQUFHaEQsU0FBU0csT0FBTyxFQUFFcUQsT0FBT0osS0FBS0MsR0FBRyxDQUFDQyxPQUFPckUsUUFBUSxLQUFLO1lBQ3JFO1FBQ0Y7UUFDQXNFLGlCQUFpQixTQUFTQSxnQkFBZ0JYLEtBQUs7WUFDN0MsSUFBSSxDQUFDLENBQUMsR0FBR3BELFdBQVdXLE9BQU8sRUFBRXlDLE1BQU1HLFNBQVMsRUFBRWxCLFNBQVNNLFlBQVksR0FBRyxPQUFPO1lBQzdFLElBQUksQ0FBQ1MsTUFBTUksT0FBTyxFQUFFLE9BQU87WUFDM0IsT0FBTyxDQUFDLEdBQUczRCwwQkFBMEJjLE9BQU8sRUFBRXlDLE1BQU1JLE9BQU8sRUFBRW5CLFNBQVNNLFlBQVksSUFBSTtRQUN4RjtJQUNGO0NBQUU7QUFDRm5ELDBCQUEwQixHQUFHRyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zhc3RrYXJ0LWxhdGVzdC1uZXh0LWFkbWluLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGUtcmFuZ2UvZGlzdC9kZWZhdWx0UmFuZ2VzLmpzPzhkMmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZVN0YXRpY1JhbmdlcyA9IGNyZWF0ZVN0YXRpY1JhbmdlcztcbmV4cG9ydHMuZGVmYXVsdElucHV0UmFuZ2VzID0gZXhwb3J0cy5kZWZhdWx0U3RhdGljUmFuZ2VzID0gdm9pZCAwO1xuXG52YXIgX2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRhdGUtZm5zL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5c1wiKSk7XG5cbnZhciBfaXNTYW1lRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGF0ZS1mbnMvaXNTYW1lRGF5XCIpKTtcblxudmFyIF9lbmRPZldlZWsgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkYXRlLWZucy9lbmRPZldlZWtcIikpO1xuXG52YXIgX3N0YXJ0T2ZXZWVrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGF0ZS1mbnMvc3RhcnRPZldlZWtcIikpO1xuXG52YXIgX2FkZE1vbnRocyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRhdGUtZm5zL2FkZE1vbnRoc1wiKSk7XG5cbnZhciBfZW5kT2ZNb250aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRhdGUtZm5zL2VuZE9mTW9udGhcIikpO1xuXG52YXIgX3N0YXJ0T2ZNb250aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRhdGUtZm5zL3N0YXJ0T2ZNb250aFwiKSk7XG5cbnZhciBfc3RhcnRPZkRheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRhdGUtZm5zL3N0YXJ0T2ZEYXlcIikpO1xuXG52YXIgX2VuZE9mRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGF0ZS1mbnMvZW5kT2ZEYXlcIikpO1xuXG52YXIgX2FkZERheXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkYXRlLWZucy9hZGREYXlzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgeyBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IH0ga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgZGVmaW5lZHMgPSB7XG4gIHN0YXJ0T2ZXZWVrOiAoMCwgX3N0YXJ0T2ZXZWVrLmRlZmF1bHQpKG5ldyBEYXRlKCkpLFxuICBlbmRPZldlZWs6ICgwLCBfZW5kT2ZXZWVrLmRlZmF1bHQpKG5ldyBEYXRlKCkpLFxuICBzdGFydE9mTGFzdFdlZWs6ICgwLCBfc3RhcnRPZldlZWsuZGVmYXVsdCkoKDAsIF9hZGREYXlzLmRlZmF1bHQpKG5ldyBEYXRlKCksIC03KSksXG4gIGVuZE9mTGFzdFdlZWs6ICgwLCBfZW5kT2ZXZWVrLmRlZmF1bHQpKCgwLCBfYWRkRGF5cy5kZWZhdWx0KShuZXcgRGF0ZSgpLCAtNykpLFxuICBzdGFydE9mVG9kYXk6ICgwLCBfc3RhcnRPZkRheS5kZWZhdWx0KShuZXcgRGF0ZSgpKSxcbiAgZW5kT2ZUb2RheTogKDAsIF9lbmRPZkRheS5kZWZhdWx0KShuZXcgRGF0ZSgpKSxcbiAgc3RhcnRPZlllc3RlcmRheTogKDAsIF9zdGFydE9mRGF5LmRlZmF1bHQpKCgwLCBfYWRkRGF5cy5kZWZhdWx0KShuZXcgRGF0ZSgpLCAtMSkpLFxuICBlbmRPZlllc3RlcmRheTogKDAsIF9lbmRPZkRheS5kZWZhdWx0KSgoMCwgX2FkZERheXMuZGVmYXVsdCkobmV3IERhdGUoKSwgLTEpKSxcbiAgc3RhcnRPZk1vbnRoOiAoMCwgX3N0YXJ0T2ZNb250aC5kZWZhdWx0KShuZXcgRGF0ZSgpKSxcbiAgZW5kT2ZNb250aDogKDAsIF9lbmRPZk1vbnRoLmRlZmF1bHQpKG5ldyBEYXRlKCkpLFxuICBzdGFydE9mTGFzdE1vbnRoOiAoMCwgX3N0YXJ0T2ZNb250aC5kZWZhdWx0KSgoMCwgX2FkZE1vbnRocy5kZWZhdWx0KShuZXcgRGF0ZSgpLCAtMSkpLFxuICBlbmRPZkxhc3RNb250aDogKDAsIF9lbmRPZk1vbnRoLmRlZmF1bHQpKCgwLCBfYWRkTW9udGhzLmRlZmF1bHQpKG5ldyBEYXRlKCksIC0xKSlcbn07XG52YXIgc3RhdGljUmFuZ2VIYW5kbGVyID0ge1xuICByYW5nZToge30sXG4gIGlzU2VsZWN0ZWQ6IGZ1bmN0aW9uIGlzU2VsZWN0ZWQocmFuZ2UpIHtcbiAgICB2YXIgZGVmaW5lZFJhbmdlID0gdGhpcy5yYW5nZSgpO1xuICAgIHJldHVybiAoMCwgX2lzU2FtZURheS5kZWZhdWx0KShyYW5nZS5zdGFydERhdGUsIGRlZmluZWRSYW5nZS5zdGFydERhdGUpICYmICgwLCBfaXNTYW1lRGF5LmRlZmF1bHQpKHJhbmdlLmVuZERhdGUsIGRlZmluZWRSYW5nZS5lbmREYXRlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gY3JlYXRlU3RhdGljUmFuZ2VzKHJhbmdlcykge1xuICByZXR1cm4gcmFuZ2VzLm1hcChmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdGF0aWNSYW5nZUhhbmRsZXIpLCByYW5nZSk7XG4gIH0pO1xufVxuXG52YXIgZGVmYXVsdFN0YXRpY1JhbmdlcyA9IGNyZWF0ZVN0YXRpY1Jhbmdlcyhbe1xuICBsYWJlbDogJ1RvZGF5JyxcbiAgcmFuZ2U6IGZ1bmN0aW9uIHJhbmdlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydERhdGU6IGRlZmluZWRzLnN0YXJ0T2ZUb2RheSxcbiAgICAgIGVuZERhdGU6IGRlZmluZWRzLmVuZE9mVG9kYXlcbiAgICB9O1xuICB9XG59LCB7XG4gIGxhYmVsOiAnWWVzdGVyZGF5JyxcbiAgcmFuZ2U6IGZ1bmN0aW9uIHJhbmdlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydERhdGU6IGRlZmluZWRzLnN0YXJ0T2ZZZXN0ZXJkYXksXG4gICAgICBlbmREYXRlOiBkZWZpbmVkcy5lbmRPZlllc3RlcmRheVxuICAgIH07XG4gIH1cbn0sIHtcbiAgbGFiZWw6ICdUaGlzIFdlZWsnLFxuICByYW5nZTogZnVuY3Rpb24gcmFuZ2UoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0RGF0ZTogZGVmaW5lZHMuc3RhcnRPZldlZWssXG4gICAgICBlbmREYXRlOiBkZWZpbmVkcy5lbmRPZldlZWtcbiAgICB9O1xuICB9XG59LCB7XG4gIGxhYmVsOiAnTGFzdCBXZWVrJyxcbiAgcmFuZ2U6IGZ1bmN0aW9uIHJhbmdlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydERhdGU6IGRlZmluZWRzLnN0YXJ0T2ZMYXN0V2VlayxcbiAgICAgIGVuZERhdGU6IGRlZmluZWRzLmVuZE9mTGFzdFdlZWtcbiAgICB9O1xuICB9XG59LCB7XG4gIGxhYmVsOiAnVGhpcyBNb250aCcsXG4gIHJhbmdlOiBmdW5jdGlvbiByYW5nZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnREYXRlOiBkZWZpbmVkcy5zdGFydE9mTW9udGgsXG4gICAgICBlbmREYXRlOiBkZWZpbmVkcy5lbmRPZk1vbnRoXG4gICAgfTtcbiAgfVxufSwge1xuICBsYWJlbDogJ0xhc3QgTW9udGgnLFxuICByYW5nZTogZnVuY3Rpb24gcmFuZ2UoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0RGF0ZTogZGVmaW5lZHMuc3RhcnRPZkxhc3RNb250aCxcbiAgICAgIGVuZERhdGU6IGRlZmluZWRzLmVuZE9mTGFzdE1vbnRoXG4gICAgfTtcbiAgfVxufV0pO1xuZXhwb3J0cy5kZWZhdWx0U3RhdGljUmFuZ2VzID0gZGVmYXVsdFN0YXRpY1JhbmdlcztcbnZhciBkZWZhdWx0SW5wdXRSYW5nZXMgPSBbe1xuICBsYWJlbDogJ2RheXMgdXAgdG8gdG9kYXknLFxuICByYW5nZTogZnVuY3Rpb24gcmFuZ2UodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnREYXRlOiAoMCwgX2FkZERheXMuZGVmYXVsdCkoZGVmaW5lZHMuc3RhcnRPZlRvZGF5LCAoTWF0aC5tYXgoTnVtYmVyKHZhbHVlKSwgMSkgLSAxKSAqIC0xKSxcbiAgICAgIGVuZERhdGU6IGRlZmluZWRzLmVuZE9mVG9kYXlcbiAgICB9O1xuICB9LFxuICBnZXRDdXJyZW50VmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRWYWx1ZShyYW5nZSkge1xuICAgIGlmICghKDAsIF9pc1NhbWVEYXkuZGVmYXVsdCkocmFuZ2UuZW5kRGF0ZSwgZGVmaW5lZHMuZW5kT2ZUb2RheSkpIHJldHVybiAnLSc7XG4gICAgaWYgKCFyYW5nZS5zdGFydERhdGUpIHJldHVybiAn4oieJztcbiAgICByZXR1cm4gKDAsIF9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMuZGVmYXVsdCkoZGVmaW5lZHMuZW5kT2ZUb2RheSwgcmFuZ2Uuc3RhcnREYXRlKSArIDE7XG4gIH1cbn0sIHtcbiAgbGFiZWw6ICdkYXlzIHN0YXJ0aW5nIHRvZGF5JyxcbiAgcmFuZ2U6IGZ1bmN0aW9uIHJhbmdlKHZhbHVlKSB7XG4gICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnREYXRlOiB0b2RheSxcbiAgICAgIGVuZERhdGU6ICgwLCBfYWRkRGF5cy5kZWZhdWx0KSh0b2RheSwgTWF0aC5tYXgoTnVtYmVyKHZhbHVlKSwgMSkgLSAxKVxuICAgIH07XG4gIH0sXG4gIGdldEN1cnJlbnRWYWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFZhbHVlKHJhbmdlKSB7XG4gICAgaWYgKCEoMCwgX2lzU2FtZURheS5kZWZhdWx0KShyYW5nZS5zdGFydERhdGUsIGRlZmluZWRzLnN0YXJ0T2ZUb2RheSkpIHJldHVybiAnLSc7XG4gICAgaWYgKCFyYW5nZS5lbmREYXRlKSByZXR1cm4gJ+KInic7XG4gICAgcmV0dXJuICgwLCBfZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzLmRlZmF1bHQpKHJhbmdlLmVuZERhdGUsIGRlZmluZWRzLnN0YXJ0T2ZUb2RheSkgKyAxO1xuICB9XG59XTtcbmV4cG9ydHMuZGVmYXVsdElucHV0UmFuZ2VzID0gZGVmYXVsdElucHV0UmFuZ2VzOyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZVN0YXRpY1JhbmdlcyIsImRlZmF1bHRJbnB1dFJhbmdlcyIsImRlZmF1bHRTdGF0aWNSYW5nZXMiLCJfZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfaXNTYW1lRGF5IiwiX2VuZE9mV2VlayIsIl9zdGFydE9mV2VlayIsIl9hZGRNb250aHMiLCJfZW5kT2ZNb250aCIsIl9zdGFydE9mTW9udGgiLCJfc3RhcnRPZkRheSIsIl9lbmRPZkRheSIsIl9hZGREYXlzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lZHMiLCJzdGFydE9mV2VlayIsIkRhdGUiLCJlbmRPZldlZWsiLCJzdGFydE9mTGFzdFdlZWsiLCJlbmRPZkxhc3RXZWVrIiwic3RhcnRPZlRvZGF5IiwiZW5kT2ZUb2RheSIsInN0YXJ0T2ZZZXN0ZXJkYXkiLCJlbmRPZlllc3RlcmRheSIsInN0YXJ0T2ZNb250aCIsImVuZE9mTW9udGgiLCJzdGFydE9mTGFzdE1vbnRoIiwiZW5kT2ZMYXN0TW9udGgiLCJzdGF0aWNSYW5nZUhhbmRsZXIiLCJyYW5nZSIsImlzU2VsZWN0ZWQiLCJkZWZpbmVkUmFuZ2UiLCJzdGFydERhdGUiLCJlbmREYXRlIiwicmFuZ2VzIiwibWFwIiwibGFiZWwiLCJNYXRoIiwibWF4IiwiTnVtYmVyIiwiZ2V0Q3VycmVudFZhbHVlIiwidG9kYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/defaultRanges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-date-range/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"DateRange\", ({\n    enumerable: true,\n    get: function get() {\n        return _DateRange.default;\n    }\n}));\nObject.defineProperty(exports, \"Calendar\", ({\n    enumerable: true,\n    get: function get() {\n        return _Calendar.default;\n    }\n}));\nObject.defineProperty(exports, \"DateRangePicker\", ({\n    enumerable: true,\n    get: function get() {\n        return _DateRangePicker.default;\n    }\n}));\nObject.defineProperty(exports, \"DefinedRange\", ({\n    enumerable: true,\n    get: function get() {\n        return _DefinedRange.default;\n    }\n}));\nObject.defineProperty(exports, \"defaultInputRanges\", ({\n    enumerable: true,\n    get: function get() {\n        return _defaultRanges.defaultInputRanges;\n    }\n}));\nObject.defineProperty(exports, \"defaultStaticRanges\", ({\n    enumerable: true,\n    get: function get() {\n        return _defaultRanges.defaultStaticRanges;\n    }\n}));\nObject.defineProperty(exports, \"createStaticRanges\", ({\n    enumerable: true,\n    get: function get() {\n        return _defaultRanges.createStaticRanges;\n    }\n}));\nvar _DateRange = _interopRequireDefault(__webpack_require__(/*! ./components/DateRange */ \"(ssr)/./node_modules/react-date-range/dist/components/DateRange/index.js\"));\nvar _Calendar = _interopRequireDefault(__webpack_require__(/*! ./components/Calendar */ \"(ssr)/./node_modules/react-date-range/dist/components/Calendar/index.js\"));\nvar _DateRangePicker = _interopRequireDefault(__webpack_require__(/*! ./components/DateRangePicker */ \"(ssr)/./node_modules/react-date-range/dist/components/DateRangePicker/index.js\"));\nvar _DefinedRange = _interopRequireDefault(__webpack_require__(/*! ./components/DefinedRange */ \"(ssr)/./node_modules/react-date-range/dist/components/DefinedRange/index.js\"));\nvar _defaultRanges = __webpack_require__(/*! ./defaultRanges */ \"(ssr)/./node_modules/react-date-range/dist/defaultRanges.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGSCw2Q0FBNEM7SUFDMUNJLFlBQVk7SUFDWkMsS0FBSyxTQUFTQTtRQUNaLE9BQU9DLFdBQVdDLE9BQU87SUFDM0I7QUFDRixDQUFDLEVBQUM7QUFDRlAsNENBQTJDO0lBQ3pDSSxZQUFZO0lBQ1pDLEtBQUssU0FBU0E7UUFDWixPQUFPRyxVQUFVRCxPQUFPO0lBQzFCO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZQLG1EQUFrRDtJQUNoREksWUFBWTtJQUNaQyxLQUFLLFNBQVNBO1FBQ1osT0FBT0ksaUJBQWlCRixPQUFPO0lBQ2pDO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZQLGdEQUErQztJQUM3Q0ksWUFBWTtJQUNaQyxLQUFLLFNBQVNBO1FBQ1osT0FBT0ssY0FBY0gsT0FBTztJQUM5QjtBQUNGLENBQUMsRUFBQztBQUNGUCxzREFBcUQ7SUFDbkRJLFlBQVk7SUFDWkMsS0FBSyxTQUFTQTtRQUNaLE9BQU9NLGVBQWVDLGtCQUFrQjtJQUMxQztBQUNGLENBQUMsRUFBQztBQUNGWix1REFBc0Q7SUFDcERJLFlBQVk7SUFDWkMsS0FBSyxTQUFTQTtRQUNaLE9BQU9NLGVBQWVFLG1CQUFtQjtJQUMzQztBQUNGLENBQUMsRUFBQztBQUNGYixzREFBcUQ7SUFDbkRJLFlBQVk7SUFDWkMsS0FBSyxTQUFTQTtRQUNaLE9BQU9NLGVBQWVHLGtCQUFrQjtJQUMxQztBQUNGLENBQUMsRUFBQztBQUVGLElBQUlSLGFBQWFTLHVCQUF1QkMsbUJBQU9BLENBQUMsd0dBQXdCO0FBRXhFLElBQUlSLFlBQVlPLHVCQUF1QkMsbUJBQU9BLENBQUMsc0dBQXVCO0FBRXRFLElBQUlQLG1CQUFtQk0sdUJBQXVCQyxtQkFBT0EsQ0FBQyxvSEFBOEI7QUFFcEYsSUFBSU4sZ0JBQWdCSyx1QkFBdUJDLG1CQUFPQSxDQUFDLDhHQUEyQjtBQUU5RSxJQUFJTCxpQkFBaUJLLG1CQUFPQSxDQUFDLG9GQUFpQjtBQUU5QyxTQUFTRCx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRVYsU0FBU1U7SUFBSTtBQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmFzdGthcnQtbGF0ZXN0LW5leHQtYWRtaW4vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L2luZGV4LmpzPzRlN2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXRlUmFuZ2VcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RhdGVSYW5nZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbGVuZGFyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DYWxlbmRhci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRhdGVSYW5nZVBpY2tlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGF0ZVJhbmdlUGlja2VyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVmaW5lZFJhbmdlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9EZWZpbmVkUmFuZ2UuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0SW5wdXRSYW5nZXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2RlZmF1bHRSYW5nZXMuZGVmYXVsdElucHV0UmFuZ2VzO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRTdGF0aWNSYW5nZXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2RlZmF1bHRSYW5nZXMuZGVmYXVsdFN0YXRpY1JhbmdlcztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVTdGF0aWNSYW5nZXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2RlZmF1bHRSYW5nZXMuY3JlYXRlU3RhdGljUmFuZ2VzO1xuICB9XG59KTtcblxudmFyIF9EYXRlUmFuZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvRGF0ZVJhbmdlXCIpKTtcblxudmFyIF9DYWxlbmRhciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9DYWxlbmRhclwiKSk7XG5cbnZhciBfRGF0ZVJhbmdlUGlja2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL0RhdGVSYW5nZVBpY2tlclwiKSk7XG5cbnZhciBfRGVmaW5lZFJhbmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL0RlZmluZWRSYW5nZVwiKSk7XG5cbnZhciBfZGVmYXVsdFJhbmdlcyA9IHJlcXVpcmUoXCIuL2RlZmF1bHRSYW5nZXNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIl9EYXRlUmFuZ2UiLCJkZWZhdWx0IiwiX0NhbGVuZGFyIiwiX0RhdGVSYW5nZVBpY2tlciIsIl9EZWZpbmVkUmFuZ2UiLCJfZGVmYXVsdFJhbmdlcyIsImRlZmF1bHRJbnB1dFJhbmdlcyIsImRlZmF1bHRTdGF0aWNSYW5nZXMiLCJjcmVhdGVTdGF0aWNSYW5nZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/styles.js":
/*!******************************************************!*\
  !*** ./node_modules/react-date-range/dist/styles.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _default = {\n    dateRangeWrapper: \"rdrDateRangeWrapper\",\n    calendarWrapper: \"rdrCalendarWrapper\",\n    dateDisplay: \"rdrDateDisplay\",\n    dateDisplayItem: \"rdrDateDisplayItem\",\n    dateDisplayItemActive: \"rdrDateDisplayItemActive\",\n    monthAndYearWrapper: \"rdrMonthAndYearWrapper\",\n    monthAndYearPickers: \"rdrMonthAndYearPickers\",\n    nextPrevButton: \"rdrNextPrevButton\",\n    month: \"rdrMonth\",\n    weekDays: \"rdrWeekDays\",\n    weekDay: \"rdrWeekDay\",\n    days: \"rdrDays\",\n    day: \"rdrDay\",\n    dayNumber: \"rdrDayNumber\",\n    dayPassive: \"rdrDayPassive\",\n    dayToday: \"rdrDayToday\",\n    dayStartOfWeek: \"rdrDayStartOfWeek\",\n    dayEndOfWeek: \"rdrDayEndOfWeek\",\n    daySelected: \"rdrDaySelected\",\n    dayDisabled: \"rdrDayDisabled\",\n    dayStartOfMonth: \"rdrDayStartOfMonth\",\n    dayEndOfMonth: \"rdrDayEndOfMonth\",\n    dayWeekend: \"rdrDayWeekend\",\n    dayStartPreview: \"rdrDayStartPreview\",\n    dayInPreview: \"rdrDayInPreview\",\n    dayEndPreview: \"rdrDayEndPreview\",\n    dayHovered: \"rdrDayHovered\",\n    dayActive: \"rdrDayActive\",\n    inRange: \"rdrInRange\",\n    endEdge: \"rdrEndEdge\",\n    startEdge: \"rdrStartEdge\",\n    prevButton: \"rdrPprevButton\",\n    nextButton: \"rdrNextButton\",\n    selected: \"rdrSelected\",\n    months: \"rdrMonths\",\n    monthPicker: \"rdrMonthPicker\",\n    yearPicker: \"rdrYearPicker\",\n    dateDisplayWrapper: \"rdrDateDisplayWrapper\",\n    definedRangesWrapper: \"rdrDefinedRangesWrapper\",\n    staticRanges: \"rdrStaticRanges\",\n    staticRange: \"rdrStaticRange\",\n    inputRanges: \"rdrInputRanges\",\n    inputRange: \"rdrInputRange\",\n    inputRangeInput: \"rdrInputRangeInput\",\n    dateRangePickerWrapper: \"rdrDateRangePickerWrapper\",\n    staticRangeLabel: \"rdrStaticRangeLabel\",\n    staticRangeSelected: \"rdrStaticRangeSelected\",\n    monthName: \"rdrMonthName\",\n    infiniteMonths: \"rdrInfiniteMonths\",\n    monthsVertical: \"rdrMonthsVertical\",\n    monthsHorizontal: \"rdrMonthsHorizontal\"\n};\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L3N0eWxlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWUsR0FBRyxLQUFLO0FBQ3ZCLElBQUlHLFdBQVc7SUFDYkMsa0JBQWtCO0lBQ2xCQyxpQkFBaUI7SUFDakJDLGFBQWE7SUFDYkMsaUJBQWlCO0lBQ2pCQyx1QkFBdUI7SUFDdkJDLHFCQUFxQjtJQUNyQkMscUJBQXFCO0lBQ3JCQyxnQkFBZ0I7SUFDaEJDLE9BQU87SUFDUEMsVUFBVTtJQUNWQyxTQUFTO0lBQ1RDLE1BQU07SUFDTkMsS0FBSztJQUNMQyxXQUFXO0lBQ1hDLFlBQVk7SUFDWkMsVUFBVTtJQUNWQyxnQkFBZ0I7SUFDaEJDLGNBQWM7SUFDZEMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLGlCQUFpQjtJQUNqQkMsZUFBZTtJQUNmQyxZQUFZO0lBQ1pDLGlCQUFpQjtJQUNqQkMsY0FBYztJQUNkQyxlQUFlO0lBQ2ZDLFlBQVk7SUFDWkMsV0FBVztJQUNYQyxTQUFTO0lBQ1RDLFNBQVM7SUFDVEMsV0FBVztJQUNYQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsVUFBVTtJQUNWQyxRQUFRO0lBQ1JDLGFBQWE7SUFDYkMsWUFBWTtJQUNaQyxvQkFBb0I7SUFDcEJDLHNCQUFzQjtJQUN0QkMsY0FBYztJQUNkQyxhQUFhO0lBQ2JDLGFBQWE7SUFDYkMsWUFBWTtJQUNaQyxpQkFBaUI7SUFDakJDLHdCQUF3QjtJQUN4QkMsa0JBQWtCO0lBQ2xCQyxxQkFBcUI7SUFDckJDLFdBQVc7SUFDWEMsZ0JBQWdCO0lBQ2hCQyxnQkFBZ0I7SUFDaEJDLGtCQUFrQjtBQUNwQjtBQUNBdEQsa0JBQWUsR0FBR0ciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYXN0a2FydC1sYXRlc3QtbmV4dC1hZG1pbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlLXJhbmdlL2Rpc3Qvc3R5bGVzLmpzP2Y0MGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2RlZmF1bHQgPSB7XG4gIGRhdGVSYW5nZVdyYXBwZXI6ICdyZHJEYXRlUmFuZ2VXcmFwcGVyJyxcbiAgY2FsZW5kYXJXcmFwcGVyOiAncmRyQ2FsZW5kYXJXcmFwcGVyJyxcbiAgZGF0ZURpc3BsYXk6ICdyZHJEYXRlRGlzcGxheScsXG4gIGRhdGVEaXNwbGF5SXRlbTogJ3JkckRhdGVEaXNwbGF5SXRlbScsXG4gIGRhdGVEaXNwbGF5SXRlbUFjdGl2ZTogJ3JkckRhdGVEaXNwbGF5SXRlbUFjdGl2ZScsXG4gIG1vbnRoQW5kWWVhcldyYXBwZXI6ICdyZHJNb250aEFuZFllYXJXcmFwcGVyJyxcbiAgbW9udGhBbmRZZWFyUGlja2VyczogJ3Jkck1vbnRoQW5kWWVhclBpY2tlcnMnLFxuICBuZXh0UHJldkJ1dHRvbjogJ3Jkck5leHRQcmV2QnV0dG9uJyxcbiAgbW9udGg6ICdyZHJNb250aCcsXG4gIHdlZWtEYXlzOiAncmRyV2Vla0RheXMnLFxuICB3ZWVrRGF5OiAncmRyV2Vla0RheScsXG4gIGRheXM6ICdyZHJEYXlzJyxcbiAgZGF5OiAncmRyRGF5JyxcbiAgZGF5TnVtYmVyOiAncmRyRGF5TnVtYmVyJyxcbiAgZGF5UGFzc2l2ZTogJ3JkckRheVBhc3NpdmUnLFxuICBkYXlUb2RheTogJ3JkckRheVRvZGF5JyxcbiAgZGF5U3RhcnRPZldlZWs6ICdyZHJEYXlTdGFydE9mV2VlaycsXG4gIGRheUVuZE9mV2VlazogJ3JkckRheUVuZE9mV2VlaycsXG4gIGRheVNlbGVjdGVkOiAncmRyRGF5U2VsZWN0ZWQnLFxuICBkYXlEaXNhYmxlZDogJ3JkckRheURpc2FibGVkJyxcbiAgZGF5U3RhcnRPZk1vbnRoOiAncmRyRGF5U3RhcnRPZk1vbnRoJyxcbiAgZGF5RW5kT2ZNb250aDogJ3JkckRheUVuZE9mTW9udGgnLFxuICBkYXlXZWVrZW5kOiAncmRyRGF5V2Vla2VuZCcsXG4gIGRheVN0YXJ0UHJldmlldzogJ3JkckRheVN0YXJ0UHJldmlldycsXG4gIGRheUluUHJldmlldzogJ3JkckRheUluUHJldmlldycsXG4gIGRheUVuZFByZXZpZXc6ICdyZHJEYXlFbmRQcmV2aWV3JyxcbiAgZGF5SG92ZXJlZDogJ3JkckRheUhvdmVyZWQnLFxuICBkYXlBY3RpdmU6ICdyZHJEYXlBY3RpdmUnLFxuICBpblJhbmdlOiAncmRySW5SYW5nZScsXG4gIGVuZEVkZ2U6ICdyZHJFbmRFZGdlJyxcbiAgc3RhcnRFZGdlOiAncmRyU3RhcnRFZGdlJyxcbiAgcHJldkJ1dHRvbjogJ3JkclBwcmV2QnV0dG9uJyxcbiAgbmV4dEJ1dHRvbjogJ3Jkck5leHRCdXR0b24nLFxuICBzZWxlY3RlZDogJ3JkclNlbGVjdGVkJyxcbiAgbW9udGhzOiAncmRyTW9udGhzJyxcbiAgbW9udGhQaWNrZXI6ICdyZHJNb250aFBpY2tlcicsXG4gIHllYXJQaWNrZXI6ICdyZHJZZWFyUGlja2VyJyxcbiAgZGF0ZURpc3BsYXlXcmFwcGVyOiAncmRyRGF0ZURpc3BsYXlXcmFwcGVyJyxcbiAgZGVmaW5lZFJhbmdlc1dyYXBwZXI6ICdyZHJEZWZpbmVkUmFuZ2VzV3JhcHBlcicsXG4gIHN0YXRpY1JhbmdlczogJ3JkclN0YXRpY1JhbmdlcycsXG4gIHN0YXRpY1JhbmdlOiAncmRyU3RhdGljUmFuZ2UnLFxuICBpbnB1dFJhbmdlczogJ3JkcklucHV0UmFuZ2VzJyxcbiAgaW5wdXRSYW5nZTogJ3JkcklucHV0UmFuZ2UnLFxuICBpbnB1dFJhbmdlSW5wdXQ6ICdyZHJJbnB1dFJhbmdlSW5wdXQnLFxuICBkYXRlUmFuZ2VQaWNrZXJXcmFwcGVyOiAncmRyRGF0ZVJhbmdlUGlja2VyV3JhcHBlcicsXG4gIHN0YXRpY1JhbmdlTGFiZWw6ICdyZHJTdGF0aWNSYW5nZUxhYmVsJyxcbiAgc3RhdGljUmFuZ2VTZWxlY3RlZDogJ3JkclN0YXRpY1JhbmdlU2VsZWN0ZWQnLFxuICBtb250aE5hbWU6ICdyZHJNb250aE5hbWUnLFxuICBpbmZpbml0ZU1vbnRoczogJ3JkckluZmluaXRlTW9udGhzJyxcbiAgbW9udGhzVmVydGljYWw6ICdyZHJNb250aHNWZXJ0aWNhbCcsXG4gIG1vbnRoc0hvcml6b250YWw6ICdyZHJNb250aHNIb3Jpem9udGFsJ1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfZGVmYXVsdCIsImRhdGVSYW5nZVdyYXBwZXIiLCJjYWxlbmRhcldyYXBwZXIiLCJkYXRlRGlzcGxheSIsImRhdGVEaXNwbGF5SXRlbSIsImRhdGVEaXNwbGF5SXRlbUFjdGl2ZSIsIm1vbnRoQW5kWWVhcldyYXBwZXIiLCJtb250aEFuZFllYXJQaWNrZXJzIiwibmV4dFByZXZCdXR0b24iLCJtb250aCIsIndlZWtEYXlzIiwid2Vla0RheSIsImRheXMiLCJkYXkiLCJkYXlOdW1iZXIiLCJkYXlQYXNzaXZlIiwiZGF5VG9kYXkiLCJkYXlTdGFydE9mV2VlayIsImRheUVuZE9mV2VlayIsImRheVNlbGVjdGVkIiwiZGF5RGlzYWJsZWQiLCJkYXlTdGFydE9mTW9udGgiLCJkYXlFbmRPZk1vbnRoIiwiZGF5V2Vla2VuZCIsImRheVN0YXJ0UHJldmlldyIsImRheUluUHJldmlldyIsImRheUVuZFByZXZpZXciLCJkYXlIb3ZlcmVkIiwiZGF5QWN0aXZlIiwiaW5SYW5nZSIsImVuZEVkZ2UiLCJzdGFydEVkZ2UiLCJwcmV2QnV0dG9uIiwibmV4dEJ1dHRvbiIsInNlbGVjdGVkIiwibW9udGhzIiwibW9udGhQaWNrZXIiLCJ5ZWFyUGlja2VyIiwiZGF0ZURpc3BsYXlXcmFwcGVyIiwiZGVmaW5lZFJhbmdlc1dyYXBwZXIiLCJzdGF0aWNSYW5nZXMiLCJzdGF0aWNSYW5nZSIsImlucHV0UmFuZ2VzIiwiaW5wdXRSYW5nZSIsImlucHV0UmFuZ2VJbnB1dCIsImRhdGVSYW5nZVBpY2tlcldyYXBwZXIiLCJzdGF0aWNSYW5nZUxhYmVsIiwic3RhdGljUmFuZ2VTZWxlY3RlZCIsIm1vbnRoTmFtZSIsImluZmluaXRlTW9udGhzIiwibW9udGhzVmVydGljYWwiLCJtb250aHNIb3Jpem9udGFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/styles.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-date-range/dist/utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calcFocusDate = calcFocusDate;\nexports.findNextRangeIndex = findNextRangeIndex;\nexports.getMonthDisplayRange = getMonthDisplayRange;\nexports.generateStyles = generateStyles;\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _addDays = _interopRequireDefault(__webpack_require__(/*! date-fns/addDays */ \"(ssr)/./node_modules/date-fns/esm/addDays/index.js\"));\nvar _differenceInCalendarMonths = _interopRequireDefault(__webpack_require__(/*! date-fns/differenceInCalendarMonths */ \"(ssr)/./node_modules/date-fns/esm/differenceInCalendarMonths/index.js\"));\nvar _differenceInCalendarDays = _interopRequireDefault(__webpack_require__(/*! date-fns/differenceInCalendarDays */ \"(ssr)/./node_modules/date-fns/esm/differenceInCalendarDays/index.js\"));\nvar _endOfWeek = _interopRequireDefault(__webpack_require__(/*! date-fns/endOfWeek */ \"(ssr)/./node_modules/date-fns/esm/endOfWeek/index.js\"));\nvar _startOfWeek = _interopRequireDefault(__webpack_require__(/*! date-fns/startOfWeek */ \"(ssr)/./node_modules/date-fns/esm/startOfWeek/index.js\"));\nvar _endOfMonth = _interopRequireDefault(__webpack_require__(/*! date-fns/endOfMonth */ \"(ssr)/./node_modules/date-fns/esm/endOfMonth/index.js\"));\nvar _startOfMonth = _interopRequireDefault(__webpack_require__(/*! date-fns/startOfMonth */ \"(ssr)/./node_modules/date-fns/esm/startOfMonth/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction calcFocusDate(currentFocusedDate, props) {\n    var shownDate = props.shownDate, date = props.date, months = props.months, ranges = props.ranges, focusedRange = props.focusedRange, displayMode = props.displayMode; // find primary date according the props\n    var targetInterval;\n    if (displayMode === \"dateRange\") {\n        var range = ranges[focusedRange[0]] || {};\n        targetInterval = {\n            start: range.startDate,\n            end: range.endDate\n        };\n    } else {\n        targetInterval = {\n            start: date,\n            end: date\n        };\n    }\n    targetInterval.start = (0, _startOfMonth.default)(targetInterval.start || new Date());\n    targetInterval.end = (0, _endOfMonth.default)(targetInterval.end || targetInterval.start);\n    var targetDate = targetInterval.start || targetInterval.end || shownDate || new Date(); // initial focus\n    if (!currentFocusedDate) return shownDate || targetDate; // // just return targetDate for native scrolled calendars\n    // if (props.scroll.enabled) return targetDate;\n    if ((0, _differenceInCalendarMonths.default)(targetInterval.start, targetInterval.end) > months) {\n        // don't change focused if new selection in view area\n        return currentFocusedDate;\n    }\n    return targetDate;\n}\nfunction findNextRangeIndex(ranges) {\n    var currentRangeIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    var nextIndex = ranges.findIndex(function(range, i) {\n        return i > currentRangeIndex && range.autoFocus !== false && !range.disabled;\n    });\n    if (nextIndex !== -1) return nextIndex;\n    return ranges.findIndex(function(range) {\n        return range.autoFocus !== false && !range.disabled;\n    });\n}\nfunction getMonthDisplayRange(date, dateOptions, fixedHeight) {\n    var startDateOfMonth = (0, _startOfMonth.default)(date, dateOptions);\n    var endDateOfMonth = (0, _endOfMonth.default)(date, dateOptions);\n    var startDateOfCalendar = (0, _startOfWeek.default)(startDateOfMonth, dateOptions);\n    var endDateOfCalendar = (0, _endOfWeek.default)(endDateOfMonth, dateOptions);\n    if (fixedHeight && (0, _differenceInCalendarDays.default)(endDateOfCalendar, startDateOfCalendar) <= 34) {\n        endDateOfCalendar = (0, _addDays.default)(endDateOfCalendar, 7);\n    }\n    return {\n        start: startDateOfCalendar,\n        end: endDateOfCalendar,\n        startDateOfMonth: startDateOfMonth,\n        endDateOfMonth: endDateOfMonth\n    };\n}\nfunction generateStyles(sources) {\n    if (!sources.length) return {};\n    var generatedStyles = sources.filter(function(source) {\n        return Boolean(source);\n    }).reduce(function(styles, styleSource) {\n        Object.keys(styleSource).forEach(function(key) {\n            styles[key] = (0, _classnames.default)(styles[key], styleSource[key]);\n        });\n        return styles;\n    }, {});\n    return generatedStyles;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/utils.js\n");

/***/ })

};
;